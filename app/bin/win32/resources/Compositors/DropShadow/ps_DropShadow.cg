//////////////////////////////////////////////////////
/////////////////////////////////// pixel shader /////
//////////////////////////////////////////////////////
#define QUAD_FLOAT
#define QUAD_REAL float
#define QUAD_REAL2 float2
#define QUAD_REAL3 float3
#define QUAD_REAL4 float4
#define QUAD_REAL3x3 float3x3
#define QUAD_REAL4x3 float4x3
#define QUAD_REAL3x4 float3x4
#define QUAD_REAL4x4 float4x4
/////////////////////////////////////////
/////// FILTER WEIGHTS //////////////////
/////////////////////////////////////////

//
// Relative filter weights for each texel.
// The default here is for symmetric distribution.
// To assign your own filter weights, just define WT9_0 through WT9_4,
//   *before* including this file.....
//
// WT9+ are for 9-tap filters, WT5+ are for 5-tap
//

// weights for 9x9 filtering

#ifndef WT9_0
// Relative filter weights indexed by distance (in texels) from "home" texel
//	(WT9_0 is the "home" or center of the filter, WT9_4 is four texels away)
#define WT9_0 1.0
#define WT9_1 0.9
#define WT9_2 0.55
#define WT9_3 0.18
#define WT9_4 0.1
#endif /* WT9_0 */

// weights for 5x5 filtering

#ifndef WT5_0
// Relative filter weights indexed by distance (in texels) from "home" texel
//	(WT5_0 is the "home" or center of the filter, WT5_2 is two texels away)
#define WT5_0 1.0
#define WT5_1 0.8
#define WT5_2 0.2
#endif /* WT5_0 */

////////////////////////////////////////

// these values are based on WT9_0 through WT9_4
#define WT9_NORMALIZE (WT9_0+2.0*(WT9_1+WT9_2+WT9_3+WT9_4))
#define K9_0 (WT9_0/WT9_NORMALIZE)
#define K9_1 (WT9_1/WT9_NORMALIZE)
#define K9_2 (WT9_2/WT9_NORMALIZE)
#define K9_3 (WT9_3/WT9_NORMALIZE)
#define K9_4 (WT9_4/WT9_NORMALIZE)

// these values are based on WT5_0 through WT5_2
#define WT5_NORMALIZE (WT5_0+2.0*(WT5_1+WT5_2))
#define K5_0 (WT5_0/WT5_NORMALIZE)
#define K5_1 (WT5_1/WT5_NORMALIZE)
#define K5_2 (WT5_2/WT5_NORMALIZE)



// like the shader in blur59, but blur ALPHA
QUAD_REAL4 blur9PSa(

		QUAD_REAL4 Position : POSITION,
		QUAD_REAL2 UV  : TEXCOORD0,
		QUAD_REAL4 UV1 : TEXCOORD1, // these contain xy and zw pairs
		QUAD_REAL4 UV2 : TEXCOORD2,
		QUAD_REAL4 UV3 : TEXCOORD3,
		QUAD_REAL4 UV4 : TEXCOORD4,
	
		uniform sampler2D SrcSamp) : COLOR
{   
    QUAD_REAL OutCol = tex2D(SrcSamp, UV4.zw).a * K9_4;
    OutCol += tex2D(SrcSamp, UV3.zw).a * K9_3;
    OutCol += tex2D(SrcSamp, UV2.zw).a * K9_2;
    OutCol += tex2D(SrcSamp, UV1.zw).a * K9_1;
    OutCol += tex2D(SrcSamp, UV).a * K9_0;
    OutCol += tex2D(SrcSamp, UV1.xy).a * K9_1;
    OutCol += tex2D(SrcSamp, UV2.xy).a * K9_2;
    OutCol += tex2D(SrcSamp, UV3.xy).a * K9_3;
    OutCol += tex2D(SrcSamp, UV4.xy).a * K9_4;
    return QUAD_REAL4(OutCol.xxx,1.0); // return blurred alpha as the color
}

// identical copies to avoid occasional ambiguity
QUAD_REAL4 blur9PSb(

		QUAD_REAL4 Position : POSITION,
		QUAD_REAL2 UV  : TEXCOORD0,
		QUAD_REAL4 UV1 : TEXCOORD1, // these contain xy and zw pairs
		QUAD_REAL4 UV2 : TEXCOORD2,
		QUAD_REAL4 UV3 : TEXCOORD3,
		QUAD_REAL4 UV4 : TEXCOORD4,
		uniform sampler2D SrcSamp) : COLOR
{   
    QUAD_REAL3 OutCol = tex2D(SrcSamp, UV4.zw).rgb * K9_4;
    OutCol += tex2D(SrcSamp, UV3.zw).rgb * K9_3;
    OutCol += tex2D(SrcSamp, UV2.zw).rgb * K9_2;
    OutCol += tex2D(SrcSamp, UV1.zw).rgb * K9_1;
    OutCol += tex2D(SrcSamp, UV).rgb * K9_0;
    OutCol += tex2D(SrcSamp, UV1.xy).rgb * K9_1;
    OutCol += tex2D(SrcSamp, UV2.xy).rgb * K9_2;
    OutCol += tex2D(SrcSamp, UV3.xy).rgb * K9_3;
    OutCol += tex2D(SrcSamp, UV4.xy).rgb * K9_4;
    return QUAD_REAL4(OutCol.rgb,1.0);
} 

float4 PS_DropShad(

	QUAD_REAL4 Position	: POSITION,
    QUAD_REAL2 UV	: TEXCOORD0,
	uniform sampler2D ScnSamp,
	uniform sampler2D GlowSamp2,
	uniform float3 BgCol,
	uniform float XOffset,
	uniform float YOffset,
	uniform float Density
) : COLOR
{   
    float2 nuv = UV + float2(XOffset,YOffset);
    float4 scn = tex2D(ScnSamp, UV); // original pic
    float fade = 1.0 - (Density * tex2D(GlowSamp2, nuv).x);
    float3 bg = BgCol * fade * (1.0-scn.a);
    return float4((scn.rgb+bg),scn.a);
}  