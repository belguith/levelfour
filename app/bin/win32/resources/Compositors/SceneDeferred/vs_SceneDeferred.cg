//////////////////////////////////////////////////////
/////////////////////////////////// vertex shader ////
//////////////////////////////////////////////////////

#define QUAD_FLOAT
#define QUAD_REAL float
#define QUAD_REAL2 float2
#define QUAD_REAL3 float3
#define QUAD_REAL4 float4
#define QUAD_REAL3x3 float3x3
#define QUAD_REAL4x3 float4x3
#define QUAD_REAL3x4 float3x4
#define QUAD_REAL4x4 float4x4 


//
// use the std connector declaration but we can ignore the light direction
//
void unlitVS(

	float3 Position	: POSITION,
    float4 UVIN		: TEXCOORD0,
    float4 Normal	: NORMAL,
    float4 Tangent	: TANGENT0,
    float4 Binormal	: BINORMAL0,
    
	out float4 HPosition	: POSITION,
    out float2 UV		: TEXCOORD0,
    out float3 LightVec	: TEXCOORD1,
    out float3 WorldNormal	: TEXCOORD2,
    out float3 WorldTangent	: TEXCOORD3,
    out float3 WorldBinormal : TEXCOORD4,
    out float3 WorldView	: TEXCOORD5,
	
	uniform float4x4 WorldITXf, // our four standard "untweakable" xforms
	uniform float4x4 WorldXf,
	uniform float4x4 ViewIXf,
	uniform float4x4 WvpXf
) {
    // OUT.LightVec = 0; 
    WorldNormal = mul(WorldITXf,Normal).xyz;
    WorldTangent = mul(WorldITXf,Tangent).xyz;
    WorldBinormal = mul(WorldITXf,Binormal).xyz;
    float4 Po = float4(Position.xyz,1);
    float3 Pw = mul(WorldXf,Po).xyz;
#ifdef FLIP_TEXTURE_Y
    UV = float2(UVIN.x,(1.0-UVIN.y));
#else /* !FLIP_TEXTURE_Y */
    UV = UVIN.xy;
#endif /* !FLIP_TEXTURE_Y */
    WorldView = normalize(float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w) - Pw);
    HPosition = mul(WvpXf,Po);
}



void ScreenQuadVS2(

	out QUAD_REAL4 Position	: POSITION,
    out QUAD_REAL2 UV	: TEXCOORD0,

    QUAD_REAL3 PositionIN : POSITION, 
    QUAD_REAL3 TexCoord : TEXCOORD0,
    uniform QUAD_REAL2 TexelOffsets
) {
    Position = QUAD_REAL4(PositionIN, 1);
    UV = QUAD_REAL2(TexCoord.xy /* TexelOffsets ignored for OpenGL */); 
}