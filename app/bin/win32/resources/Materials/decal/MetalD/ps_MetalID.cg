void metal_shared(
			float3 LightVec	: TEXCOORD1,
			float3 WorldNormal	: TEXCOORD2,
			float3 WorldView	: TEXCOORD5,
			// parameters
			float3 LightColor,
			uniform float Kd,
			uniform float SpecExpon,
			uniform float3 LampColor,			
			uniform float3 AmbiColor,
			// outputs
			out float3 DiffuseContrib,
			out float3 SpecularContrib)
{
    float3 Ln = normalize(LightVec.xyz);
    float3 Nn = normalize(WorldNormal);
    float3 Vn = normalize(WorldView);
    float3 Hn = normalize(Vn + Ln);
    float4 litV = lit(dot(Ln,Nn),dot(Hn,Nn),SpecExpon);
    DiffuseContrib = litV.y * Kd * LightColor + AmbiColor;
    SpecularContrib = litV.z * LightColor;
}

float4 metalDPS(

		float3 WorldNormal : TEXCOORD2,
		float3 LightVec : TEXCOORD1,
		float3 WorldView : TEXCOORD5,
		float2 UV : TEXCOORD0,
		float3 LightColor,
		uniform float3 SurfaceColor,
		uniform float Kd,
		uniform float SpecExpon,
		uniform float3 LampColor,
		uniform float3 AmbiColor
) : COLOR {
    
	float3 diffContrib;
	float3 specContrib;
	metal_shared(LightVec,WorldNormal,WorldView,LightColor,
			Kd,SpecExpon,LampColor,AmbiColor,diffContrib,specContrib);
	float3 result = SurfaceColor * (specContrib + diffContrib);
	return float4(result,1);
}

float4 metalDPS_t(
		
		float2 UV	: TEXCOORD0,
		uniform float3 SurfaceColor,
		uniform sampler2D ColorSampler : register(s0),
		uniform float Kd,
		uniform float SpecExpon,
		uniform float3 LampColor,
		uniform float3 AmbiColor
) : COLOR {
    float3 diffContrib;
    float3 specContrib;
	metal_shared(LightVec,WorldNormal,WorldView,UV,
			Kd,SpecExpon,LampColor,AmbiColor,
			diffContrib,specContrib);
    float3 map = tex2D(ColorSampler,UV).xyz;
    float3 result = SurfaceColor * map * (specContrib + diffContrib);
    return float4(result,1);
}