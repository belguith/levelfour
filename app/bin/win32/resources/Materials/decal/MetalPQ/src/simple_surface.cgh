/*********************************************************************NVMH3****
$Id: //sw/devtools/ShaderLibrary/main/CgFX/simple_surface.cgh#1 $

Copyright NVIDIA Corporation 2002-2007
TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED
*AS IS* AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS
BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES
WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS)
ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF NVIDIA HAS
BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

Comments:
	This Cg header file contains many declarations of 'untweakable' global shading
		values, some common simple shading data structures, and some shader
		functions that are repeated across many shaders in the NVIDIA shader library.
	Note the few compile-time flags, which enable the optional use of quadratic
		lighting and/or correct for poorly-formed application data (un-normalized
		light directions). These flags would normally be set in the effect that
		calls "simple_surface.cgh" on a line BEFORE #including this file.

// TO-DO KB: overload bug to Cg team

******************************************************************************/

#ifndef _H_SIMPLE_SURFACE
#define _H_SIMPLE_SURFACE

// Compile-time flags
// #define LIGHT_DIRECTION_NEEDS_NORMALIZE
// #define QUADRATIC_FALLOFF
//
// #define PERMIT_OVERLOADED_SHADERS

// UNTweakables /////////////////////
// "Untweakables" are those shader global values that are typically tracked automatically
//		by the CPU-side application. They are therefore not "tweakable" in a shader editor,
//		and they are set to have no widget in the properties panes of material editors.

//
// All 3D viewers need to have basic camera transform info available
//
float4x4 WorldITXf : WorldInverseTranspose < string UIWidget = "None";>;
float4x4 WVPXf : WorldViewProjection < string UIWidget = "None";>;
float4x4 WorldXf : World < string UIWidget = "None";>;
float4x4 ViewIXf : ViewInverse < string UIWidget = "None";>;

/////////////////////////////////////////////////////////////////////////////////
// COMMON STRUCTURES ////////////////////////////////////////////////////////////
// These structures define common data packaging for vertex data //
//		as it travels from CPU vertex buffer into and out of the vertex shader //
//		on its way to the rasterizer and fragment/pixel shading /////////////////
/////////////////////////////////////////////////////////////////////////////////

//
// Typical simple per-vertex data provided by the application in the vertex buffer
//
struct SimpleAppData {
    float3 Position	: POSITION;
    float4 UV		: TEXCOORD0;
    float4 Normal	: NORMAL;
};

//
// Data passed by the vertex shader "SimpleSurfaceVS()" (below) to fragment processing
//
struct SimpleVertexOutput {
    float4 HPosition	: POSITION;
    float2 UV	: TEXCOORD0;
    float3 LightVec	: TEXCOORD1;
    float3 WorldNormal	: TEXCOORD2;
    float3 WorldView	: TEXCOORD5;
};

//
// Data passed by the vertex-lighting vertex shaders below -- already lit in VERTEX
//		shading (crude-looking, but faster in some cases)
//
struct ColoredVertexOutput {
    float4 HPosition	: POSITION;
    float2 UV	: TEXCOORD0;
    float4 diffCol	: COLOR0;
    float4 specCol	: COLOR1;
};

//////////////////////////////////////////////////////////////////
// SIMPLE VERTEX SHADER FUNCTIONS ////////////////////////////////
//////////////////////////////////////////////////////////////////

//
// sets up values for Fragment/Pixel Shading with a POINT light source.
//		Pass all the values the pixel shader will need to complete the lighting.
//

SimpleVertexOutput simple_surf_pt_vs(SimpleAppData IN,uniform float3 LampPosition)
{
    SimpleVertexOutput OUT = (SimpleVertexOutput)0;
    float4 Nn = normalize(IN.Normal);	// in "object" coordinates
    OUT.WorldNormal = mul(WorldITXf, Nn).xyz;
    float4 Po = float4(IN.Position.xyz,1);
    float3 Pw = mul(WorldXf, Po).xyz;	// in "world" coordinates
    OUT.LightVec = normalize(LampPosition.xyz - Pw);
    OUT.UV = IN.UV.xy;
    OUT.WorldView = normalize(float3(ViewIXf[0].w, ViewIXf[1].w, ViewIXf[2].w) - Pw);
    OUT.HPosition = mul(WVPXf, Po);
    return OUT;
}

#ifdef PERMIT_OVERLOADED_SHADERS
// overload for float4 lamp position
SimpleVertexOutput simple_surf_pt_vs(SimpleAppData IN,uniform float4 LampPosition)
{
    return simple_surf_pt_vs(IN,LampPosition.xyz);
}
#endif /* PERMIT_OVERLOADED_SHADERS */

//
// Sets up values for Fragment/Pixel Shading with a DIRECTIONAL light source.
//		Pass all the values the pixel shader will need to complete the lighting
//

SimpleVertexOutput simple_surf_dir_vs(SimpleAppData IN,uniform float3 LampDirection)
{
    SimpleVertexOutput OUT = (SimpleVertexOutput)0;
    float4 Nn = normalize(IN.Normal);	// in "object" coordinates
    OUT.WorldNormal = mul(WorldITXf, Nn).xyz;
    float4 Po = float4(IN.Position.xyz,1);
    float3 Pw = mul(WorldXf, Po).xyz;	// in "world" coordinates
#ifdef LIGHT_DIRECTION_NEEDS_NORMALIZE
    OUT.LightVec = -normalize(LampDirection);
#else /* !LIGHT_DIRECTION_NEEDS_NORMALIZE */
    OUT.LightVec = -LampDirection;
#endif /* !LIGHT_DIRECTION_NEEDS_NORMALIZE */
    OUT.UV = IN.UV.xy;
    OUT.WorldView = normalize(float3(ViewIXf[0].w, ViewIXf[1].w, ViewIXf[2].w) - Pw);
    OUT.HPosition = mul(WVPXf, Po);
    return OUT;
}

#ifdef PERMIT_OVERLOADED_SHADERS
// overload for float4 direction
SimpleVertexOutput simple_surf_dir_vs(SimpleAppData IN,uniform float4 LampDirection)
{
    return simple_surf_dir_vs(IN,LampDirection.xyz);
}
#endif /* PERMIT_OVERLOADED_SHADERS */

//////////////////////////////////////////////
// Vertex Shaders with Per-Vertex Lighting ///
//////////////////////////////////////////////

//
// vertex lighting from a POINT light source
//		pass only pre-lit diffuse and specular colors along with texture coords
//
// Note that this lighting incorporates the Ambient light color -- for multi-pass use, either
//		set the Ambient term to zero for all but one pass, or make a non-ambient-lit variation.

ColoredVertexOutput vertex_lit_pt_vs(SimpleAppData IN,
			uniform float3 LampPosition,
			uniform float3 LampColor, // for quadratic lights, factor intensity into this color!
			uniform float3 AmbiColor,
			uniform float3 SurfColor,
			uniform float Kd,
			uniform float Ks,
			uniform float PhongExp)
{
    ColoredVertexOutput OUT = (ColoredVertexOutput)0;
    float3 Nn = normalize(mul(WorldITXf, IN.Normal).xyz);
    float4 Po = float4(IN.Position.xyz,1);
    float3 Pw = mul(WorldXf, Po).xyz;
    float3 L = LampPosition - Pw;
#ifdef QUADRATIC_FALLOFF
    float dSq = dot(L,L);
    float3 Ln = L/dSq;
#else /* ! QUADRATIC_FALLOFF */
    float3 Ln = normalize(L);
#endif /* ! QUADRATIC_FALLOFF */
    float ldn = dot(Ln,Nn);
    float diffComp = max(0,ldn) * Kd;
#ifdef QUADRATIC_FALLOFF
    diffComp = diffComp / dSq;
#endif /*  QUADRATIC_FALLOFF */
    OUT.diffCol = float4((SurfColor*(diffComp*LampColor+AmbiColor)),1);
    OUT.UV = IN.UV.xy;
    float3 Vn = normalize(float3(ViewIXf[0].w, ViewIXf[1].w, ViewIXf[2].w) - Pw);
    float3 Hn = normalize(Vn + Ln);
    float hdn = Ks * pow(max(0,dot(Hn,Nn)),PhongExp);
#ifdef QUADRATIC_FALLOFF
    hdn = hdn / dSq;
#endif /*  QUADRATIC_FALLOFF */
    OUT.specCol = float4((hdn * LampColor * SurfColor),1);
    OUT.HPosition = mul(WVPXf, Po);
    return OUT;
}

#ifdef PERMIT_OVERLOADED_SHADERS
// overload for float4 positions
// for quadratic lights, factor intensity into lamp color!
ColoredVertexOutput vertex_lit_pt_vs(SimpleAppData IN,
			uniform float4 LampPosition,
			uniform float3 LampColor,
			uniform float3 AmbiColor,
			uniform float3 SurfColor,
			uniform float Kd,
			uniform float Ks,
			uniform float PhongExp)
{
    return vertex_lit_pt_vs(IN,LampPosition.xyz,LampColor,AmbiColor,SurfColor,Kd,Ks,PhongExp);
}

// overload that incorporates light intensity - typically for quadratic-falloff lighting
ColoredVertexOutput vertex_lit_pt_vs(SimpleAppData IN,
			uniform float3 LampPosition,
			uniform float3 LampColor,
			uniform float3 AmbiColor,
			uniform float3 SurfColor,
			uniform float Kd,
			uniform float Ks,
			uniform float PhongExp,
			uniform float LampIntensity)
{
    float3 brightColor = LampIntensity * LampColor; // inherently "uniform"
    return vertex_lit_pt_vs(IN,LampPosition,brightColor,AmbiColor,SurfColor,Kd,Ks,PhongExp);
}

// overload that incorporates light intensity + float4 Lamp Position
ColoredVertexOutput vertex_lit_pt_vs(SimpleAppData IN,
			uniform float4 LampPosition,
			uniform float3 LampColor,
			uniform float3 AmbiColor,
			uniform float3 SurfColor,
			uniform float Kd,
			uniform float Ks,
			uniform float PhongExp,
			uniform float LampIntensity)
{
    float3 brightColor = LampIntensity * LampColor; // inherently "uniform"
    return vertex_lit_pt_vs(IN,LampPosition.xyz,brightColor,AmbiColor,SurfColor,Kd,Ks,PhongExp);
}
#endif /* PERMIT_OVERLOADED_SHADERS */

//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////

//
// vertex lighting from a DIRECTIONAL light source
//		pass only pre-lit diffuse and specular colors along with texture coords
//
// Note that this lighting incorporates the Ambient light color -- for multi-pass use, either
//		set the Ambient term to zero for all but one pass, or make a non-ambient-lit variation.

ColoredVertexOutput vertex_lit_dir_vs(SimpleAppData IN,
			uniform float3 LampDirection,
			uniform float3 LampColor,
			uniform float3 AmbiColor,
			uniform float3 SurfColor,
			uniform float Kd,
			uniform float Ks,
			uniform float PhongExp)
{
    ColoredVertexOutput OUT = (ColoredVertexOutput)0;
    float3 Nn = normalize(mul(WorldITXf, IN.Normal).xyz);
    float4 Po = float4(IN.Position.xyz,1);
    float3 Pw = mul(WorldXf, Po).xyz;
#ifdef LIGHT_DIRECTION_NEEDS_NORMALIZE
    float3 Ln = -normalize(LampDirection);
#else /* !LIGHT_DIRECTION_NEEDS_NORMALIZE */
    float3 Ln = -LampDirection;
#endif /* !LIGHT_DIRECTION_NEEDS_NORMALIZE */
    float ldn = dot(Ln,Nn);
    float diffComp = max(0,ldn) * Kd;
    OUT.diffCol = float4((SurfColor*(diffComp*LampColor+AmbiColor)),1);
    OUT.UV = IN.UV.xy;
    float3 Vn = normalize(float3(ViewIXf[0].w, ViewIXf[1].w, ViewIXf[2].w) - Pw);
    float3 Hn = normalize(Vn + Ln);
    float hdn = Ks * pow(max(0,dot(Hn,Nn)),PhongExp);
    OUT.specCol = float4((hdn * LampColor * SurfColor),1);
    OUT.HPosition = mul(WVPXf, Po);
    return OUT;
}

#ifdef PERMIT_OVERLOADED_SHADERS
// overload for float4 direction vectors
ColoredVertexOutput vertex_lit_dir_vs(SimpleAppData IN,
			uniform float4 LampDirection,
			uniform float3 LampColor,
			uniform float3 AmbiColor,
			uniform float3 SurfColor,
			uniform float Kd,
			uniform float Ks,
			uniform float PhongExp)
{
    return vertex_lit_dir_vs(IN, LampDirection.xyz,LampColor,AmbiColor,SurfColor,Kd,Ks,PhongExp);
}
#endif /* PERMIT_OVERLOADED_SHADERS */

#endif /* ! _H_SIMPLE_SURFACE */

//////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////// eof ///
//////////////////////////////////////////////////////////////////
