/********* pixel shaders ********/

void plastic_shared(
			
			float3 LightVec	: TEXCOORD1,
			float3 WorldNormal	: TEXCOORD2,
			float3 WorldView	: TEXCOORD5,
			
			uniform float Kd,
			uniform float Ks,
			uniform float SpecExpon,
			uniform float Kr,
			uniform float FresnelMin,
			uniform float FresnelExp,
			uniform samplerCUBE EnvSampler,
			float3 LightColor,
			uniform float3 AmbiColor,
			out float3 DiffuseContrib,
			out float3 SpecularContrib)
{
    float3 Ln = normalize(LightVec);
    float3 Nn = normalize(WorldNormal);
    float3 Vn = normalize(WorldView);
    float3 Hn = normalize(Vn + Ln);
    float4 litV = lit(dot(Ln,Nn),dot(Hn,Nn),SpecExpon);
    DiffuseContrib = litV.y * Kd * LightColor + AmbiColor;
    SpecularContrib = litV.z * Ks * LightColor;
    float KrMin = (Kr * FresnelMin);
    float InvFrExp = (1.0/FresnelExp);
    float fresnel = lerp(Kr,KrMin,pow(abs(dot(Nn,Vn)),InvFrExp));
    float3 reflVect = -reflect(Vn,Nn);
    float3 ReflectionContrib = fresnel * texCUBE(EnvSampler,reflVect).rgb;
    SpecularContrib += ReflectionContrib;
}

float4 plasticPS(
			
			float3 LightVec	: TEXCOORD1,
			float3 WorldNormal	: TEXCOORD2,
			float3 WorldView	: TEXCOORD5,
		    uniform float3 SurfaceColor,
		    uniform float Kd,
		    uniform float Ks,
		    uniform float SpecExpon,
		    uniform float Kr,
		    uniform float FresnelMin,
		    uniform float FresnelExp,
		    uniform samplerCUBE EnvSampler : register(s0),
		    uniform float3 LampColor,
		    uniform float3 AmbiColor
) : COLOR {
    float3 diffContrib;
    float3 specContrib;
	plastic_shared(LightVec,WorldNormal,WorldView,Kd,Ks,SpecExpon,
				Kr,FresnelMin,FresnelExp,
				EnvSampler,LampColor,AmbiColor,
				diffContrib,specContrib);
    float3 result = specContrib + (SurfaceColor * diffContrib);
    return float4(result,1);
}

float4 plasticPS_t(

			float3 LightVec	: TEXCOORD1,
			float3 WorldNormal	: TEXCOORD2,
			float3 WorldView	: TEXCOORD5,
			float2 UV		: TEXCOORD0,
		    uniform float3 SurfaceColor,
		    uniform sampler2D ColorSampler : register(s0),
		    uniform float Kd,
		    uniform float Ks,
		    uniform float SpecExpon,
		    uniform float Kr,
		    uniform float FresnelMin,
		    uniform float FresnelExp,
		    uniform samplerCUBE EnvSampler : register(s1),
		    uniform float3 LampColor,
		    uniform float3 AmbiColor
) : COLOR {
    float3 diffContrib;
    float3 specContrib;
	plastic_shared(LightVec,WorldNormal,WorldView,Kd,Ks,SpecExpon,
				Kr,FresnelMin,FresnelExp,
				EnvSampler,LampColor,AmbiColor,
				diffContrib,specContrib);
    float3 map = tex2D(ColorSampler,UV).xyz;
    float3 result = specContrib + (SurfaceColor * map * diffContrib);
    return float4(result,1);
}

// same as above with the addition of quadratic falloff

float4 plasticQPS(
			float3 LightVec	: TEXCOORD1,
			float3 WorldNormal	: TEXCOORD2,
			float3 WorldView	: TEXCOORD5,
		    uniform float3 SurfaceColor,
		    uniform float Kd,
		    uniform float Ks,
		    uniform float SpecExpon,
		    uniform float Kr,
		    uniform float FresnelMin,
		    uniform float FresnelExp,
		    uniform samplerCUBE EnvSampler : register(s0),
		    uniform float3 LampColor,
		    uniform float LampIntensity,
		    uniform float3 AmbiColor
) : COLOR {
    float3 diffContrib;
    float3 specContrib;
    float3 Cl = (LampIntensity/dot(LightVec,LightVec)) * LampColor;
    plastic_shared(LightVec,WorldNormal,WorldView,Kd,Ks,SpecExpon,
			    Kr,FresnelMin,FresnelExp,
			    EnvSampler,Cl,AmbiColor,
			    diffContrib,specContrib);
    float3 result = specContrib + (SurfaceColor * diffContrib);
    return float4(result,1);
}

float4 plasticQPS_t(
			float3 LightVec	: TEXCOORD1,
			float3 WorldNormal	: TEXCOORD2,
			float3 WorldView	: TEXCOORD5,
			float2 UV		: TEXCOORD0,
		    uniform float3 SurfaceColor,
		    uniform sampler2D ColorSampler : register(s0),
		    uniform float Kd,
		    uniform float Ks,
		    uniform float SpecExpon,
		    uniform float Kr,
		    uniform float FresnelMin,
		    uniform float FresnelExp,
		    uniform samplerCUBE EnvSampler : register(s1),
		    uniform float3 LampColor,
		    uniform float LampIntensity,
		    uniform float3 AmbiColor
) : COLOR {
    float3 diffContrib;
    float3 specContrib;
    float3 Cl = (LampIntensity/dot(LightVec,LightVec)) * LampColor;
    plastic_shared(LightVec,WorldNormal,WorldView,Kd,Ks,SpecExpon,
			    Kr,FresnelMin,FresnelExp,
			    EnvSampler,Cl,AmbiColor,
			    diffContrib,specContrib);
    float3 map = tex2D(ColorSampler,UV).xyz;
    float3 result = specContrib + (SurfaceColor * map * diffContrib);
    return float4(result,1);
}
