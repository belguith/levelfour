//////////////////////////////////////////////////////////////////
// SIMPLE VERTEX SHADER FUNCTIONS ////////////////////////////////
//////////////////////////////////////////////////////////////////

//
// sets up values for Fragment/Pixel Shading with a POINT light source.
//		Pass all the values the pixel shader will need to complete the lighting.
//

void simple_surf_pt_vs(

		float3 Position	: POSITION,
		float4 UVIN		: TEXCOORD0,
		float4 Normal	: NORMAL,
		
		out float4 HPosition	: POSITION,
		out float2 UV	: TEXCOORD0,
		out float3 LightVec	: TEXCOORD1,
		out float3 WorldNormal	: TEXCOORD2,
		out float3 WorldView	: TEXCOORD5,
	
		uniform float4x4 WorldITXf, // our four standard "untweakable" xforms
		uniform float4x4 WorldXf,
		uniform float4x4 ViewIXf,
		uniform float4x4 WvpXf,
		uniform float3 LampPosition)
{
    float4 Nn = normalize(Normal);	// in "object" coordinates
    WorldNormal = mul(WorldITXf, Nn).xyz;
    float4 Po = float4(Position.xyz,1);
    float3 Pw = mul(WorldXf, Po).xyz;	// in "world" coordinates
    LightVec = normalize(LampPosition.xyz - Pw);
    UV = UVIN.xy;
    WorldView = normalize(float3(ViewIXf[0].w, ViewIXf[1].w, ViewIXf[2].w) - Pw);
    HPosition = mul(WvpXf, Po);
}

//////////////////////////////////////////////
// Vertex Shaders with Per-Vertex Lighting ///
//////////////////////////////////////////////

//
// vertex lighting from a POINT light source
//		pass only pre-lit diffuse and specular colors along with texture coords
//
// Note that this lighting incorporates the Ambient light color -- for multi-pass use, either
//		set the Ambient term to zero for all but one pass, or make a non-ambient-lit variation.

void vertex_lit_pt_vs(

			float3 Position	: POSITION,
			float4 UVIN		: TEXCOORD0,
			float4 Normal	: NORMAL,
		
			out float4 HPosition	: POSITION,
			out float2 UV	: TEXCOORD0,
			out float4 diffCol	: COLOR0,
			out float4 specCol	: COLOR1,
			
			uniform float4x4 WorldITXf, // our four standard "untweakable" xforms
			uniform float4x4 WorldXf,
			uniform float4x4 ViewIXf,
			uniform float4x4 WvpXf,
			
			uniform float3 LampPosition,
			uniform float3 LampColor, // for quadratic lights, factor intensity into this color!
			uniform float3 AmbiColor,
			uniform float3 SurfColor,
			uniform float Kd,
			uniform float Ks,
			uniform float PhongExp)
{
    float3 Nn = normalize(mul(WorldITXf, Normal).xyz);
    float4 Po = float4(Position.xyz,1);
    float3 Pw = mul(WorldXf, Po).xyz;
    float3 L = LampPosition - Pw;
#ifdef QUADRATIC_FALLOFF
    float dSq = dot(L,L);
    float3 Ln = L/dSq;
#else /* ! QUADRATIC_FALLOFF */
    float3 Ln = normalize(L);
#endif /* ! QUADRATIC_FALLOFF */
    float ldn = dot(Ln,Nn);
    float diffComp = max(0,ldn) * Kd;
#ifdef QUADRATIC_FALLOFF
    diffComp = diffComp / dSq;
#endif /*  QUADRATIC_FALLOFF */
    diffCol = float4((SurfColor*(diffComp*LampColor+AmbiColor)),1);
    UV = UVIN.xy;
    float3 Vn = normalize(float3(ViewIXf[0].w, ViewIXf[1].w, ViewIXf[2].w) - Pw);
    float3 Hn = normalize(Vn + Ln);
    float hdn = Ks * pow(max(0,dot(Hn,Nn)),PhongExp);
#ifdef QUADRATIC_FALLOFF
    hdn = hdn / dSq;
#endif /*  QUADRATIC_FALLOFF */
    specCol = float4((hdn * LampColor * SurfColor),1);
    HPosition = mul(WvpXf, Po);
}