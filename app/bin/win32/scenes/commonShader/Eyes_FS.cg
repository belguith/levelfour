// Expand a range-compressed vector
float3 expand(float3 v)
{
	return (v - 0.5) * 2;
}

void ps_main(   //in 
				float2 iTexCoord	: TEXCOORD3,				
				float3 iViewDir		: TEXCOORD4,
				float3 iLightDir	: TEXCOORD5,			    
				//out
				out float4 result	: COLOR,
				//parameter				
				uniform float	eye_exposure,
				uniform float4	fvAmbient,
				uniform float	eyeBrightness,
				uniform float	eyeSpecular,				
				uniform sampler2D	colorMapSampler	: register(s0),
				uniform sampler2D	bumpMapSampler	: register(s1),
				uniform samplerCUBE DiffuseCube		: register(s2),
				uniform samplerCUBE SpecularCube	: register(s3),
				uniform samplerCUBE SpecularEyeCube	: register(s4))
{	
	float4 BumpSample       = tex2D( bumpMapSampler, iTexCoord );
    float3 fvNormal         = normalize( expand(BumpSample.xyz));         
	fvNormal  = (fvNormal * 0.5);
	
    float3 fvView           = normalize( iViewDir );
    float3 Reflect			= reflect(fvView, fvNormal);
    float4 EyeSpecCubeValue = texCUBE(SpecularEyeCube, Reflect) * eye_exposure;  
    float4 SpecCubeValue	= texCUBE(SpecularCube, Reflect) * eye_exposure;  
    float4 DiffCubeValue	= texCUBE(DiffuseCube, fvNormal) * eye_exposure; 
   
    float  Specular    = lerp(SpecCubeValue, EyeSpecCubeValue, BumpSample.a);
   
	float4 fvBaseColor = tex2D(colorMapSampler, iTexCoord);
   
	float4 fvTotalAmbient   = fvAmbient * fvBaseColor; 
	float4 fvTotalDiffuse   = DiffCubeValue * fvBaseColor * eyeBrightness; 
  
    float4 fvTotalSpecular  = eyeSpecular * Specular;
    float4 color = saturate( fvTotalAmbient + fvTotalDiffuse + fvTotalSpecular );
	color *= fvBaseColor.a;
		
	result = color;	
	

}
