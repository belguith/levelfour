

//////////////////////////////////////////////////////
////////////////////////////////// pixel shaders /////
//////////////////////////////////////////////////////

half luminance(half3 c)
{
	return dot( c, float3(0.3, 0.59, 0.11) );
}

// this function should be baked into a texture lookup for performance
half highlights(half3 c, uniform float HighlightThreshold)
{
	return smoothstep(HighlightThreshold, 1.0, luminance(c.rgb));
}

half4 PS_Downsample(

			float4 Position   : POSITION,
			float2 TexCoord[4]: TEXCOORD0,
	
			uniform sampler2D OrigSampler: register(s0),
			uniform float HighlightThreshold
) : COLOR {
	half4 c;
#if 0
	// sub sampling
	c = tex2D(OrigSampler, TexCoord[0]);
#else
	// box filter
	c = tex2D(OrigSampler, TexCoord[0]) * 0.25;
	c += tex2D(OrigSampler, TexCoord[1]) * 0.25;
	c += tex2D(OrigSampler, TexCoord[2]) * 0.25;
	c += tex2D(OrigSampler, TexCoord[3]) * 0.25;
#endif

	// store hilights in alpha
	c.a = highlights(c.rgb,HighlightThreshold);

	return c;
}


// fx doesn't support variable length arrays
// otherwise we could generalize this
half4 PS_Blur7(

			float4 Position   : POSITION,
			float2 TexCoord[8]: TEXCOORD0,
			
			uniform sampler2D OrigSampler: register(s0),
			uniform half weight[7]
) : COLOR {
    half4 c = 0;
    // this loop will be unrolled by compiler
    for(int i=0; i<7; i++) {
    	c += tex2D(OrigSampler, TexCoord[i]) * weight[i];
   	}
    return c;
} 

half4 PS_Comp(

			float4 Position   : POSITION,
			float2 TexCoord0  : TEXCOORD0,
			float2 TexCoord1  : TEXCOORD1,
			
			uniform sampler2D SceneSampler: register(s0),
			uniform sampler2D BlurredSceneSampler: register(s1),
			uniform float SceneIntensity,
			uniform float GlowIntensity,
			uniform float HighlightIntensity
) : COLOR {   
	half4 orig = tex2D(SceneSampler, TexCoord0);
	half4 blur = tex2D(BlurredSceneSampler, TexCoord1);
	return  SceneIntensity*orig +
		GlowIntensity*blur +
		HighlightIntensity*blur.a;
}  
