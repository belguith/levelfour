#define DOWNSAMPLE_SCALE 0.25

////////////////////////////////////////////////////////////
////////////////////////////////// vertex shaders //////////
////////////////////////////////////////////////////////////

// generate texture coordinates to sample 4 neighbours
void VS_Downsample(

		out float4 Position   : POSITION,
		out float2 TexCoord[4]: TEXCOORD0,

		float4 PositionIN : POSITION,
		float2 TexCoordIN : TEXCOORD0,
		uniform float2 WindowSize)
{
    float2 texelSize = DOWNSAMPLE_SCALE / WindowSize;
    float2 s = TexCoordIN;
    Position = PositionIN;
    TexCoord[0] = s;
    TexCoord[1] = s + float2(2, 0)*texelSize;
    TexCoord[2] = s + float2(2, 2)*texelSize;
    TexCoord[3] = s + float2(0, 2)*texelSize;	
}

#define NSAMPLES 7
// generate texcoords for blur
void VS_Blur7(

			out float4 Position   : POSITION,
			out float2 TexCoord[8]: TEXCOORD0,

			float4 PositionIN : POSITION, 
		    float2 TexCoordIN : TEXCOORD0,
		    uniform float2 direction,
		    uniform float BlurWidth,
		    uniform float2 WindowSize)
{
    Position = PositionIN;
    float2 texelSize = BlurWidth / WindowSize;
    float2 s = TexCoordIN - texelSize*(NSAMPLES-1)*0.5*direction;
    for(int i=0; i<NSAMPLES; i++) {
    	TexCoord[i] = s + texelSize*i*direction;
    }
}

void VS_Quad(

		out float4 Position   : POSITION,
		out float2 TexCoord0  : TEXCOORD0,
		out float2 TexCoord1  : TEXCOORD1,

		float4 PositionIN : POSITION, 
		float2 TexCoord : TEXCOORD0,
		uniform float2 WindowSize)
{
    float2 texelSize = 1.0 / WindowSize;
    Position = PositionIN;
    // don't want bilinear filtering on original scene:
    TexCoord0 = TexCoord;
    TexCoord1 = TexCoord;
}
