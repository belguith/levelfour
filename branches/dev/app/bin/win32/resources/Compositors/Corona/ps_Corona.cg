// Relative filter weights indexed by distance from "home" texel
//    This set for 9-texel sampling
#define WT9_0 1.0
#define WT9_1 0.9
#define WT9_2 0.55
#define WT9_3 0.18
#define WT9_4 0.1

#define WT9_NORMALIZE (WT9_0+2.0*(WT9_1+WT9_2+WT9_3+WT9_4))

// HorizBlur pass

float4 PS_Blur_Horizontal_9tap(

	float4 Position   : POSITION,
    float4 Diffuse    : COLOR0,
    float4 TexCoord0   : TEXCOORD0,
    float4 TexCoord1   : TEXCOORD1,
    float4 TexCoord2   : TEXCOORD2,
    float4 TexCoord3   : TEXCOORD3,
    float4 TexCoord4   : TEXCOORD4,
    float4 TexCoord5   : TEXCOORD5,
    float4 TexCoord6   : TEXCOORD6,
    float4 TexCoord7   : TEXCOORD7,
    float4 TexCoord8   : COLOR1,
	
    uniform sampler2D ObjectsSamp : register(s0),
    uniform sampler2D GlowSampler : register(s1),
#ifdef NOISY_HALO
    uniform sampler3D NoiseSampler : register(s2),
    uniform float Timer,
    uniform float Speed,
    uniform float2 Crawl,
    uniform float NoiseBright,
    uniform float NoiseScale,
#endif /* NOISY_HALO */
    uniform float Trailfade
) : COLOR {   
    float OutCol = tex2Dbias(ObjectsSamp, TexCoord0).w * (WT9_1/WT9_NORMALIZE);
    OutCol += tex2Dbias(ObjectsSamp, TexCoord1).w * (WT9_2/WT9_NORMALIZE);
    OutCol += tex2Dbias(ObjectsSamp, TexCoord2).w * (WT9_3/WT9_NORMALIZE);
    OutCol += tex2Dbias(ObjectsSamp, TexCoord3).w * (WT9_4/WT9_NORMALIZE);
    OutCol += tex2Dbias(ObjectsSamp, TexCoord4).w * (WT9_0/WT9_NORMALIZE);
    OutCol += tex2Dbias(ObjectsSamp, TexCoord5).w * (WT9_1/WT9_NORMALIZE);
    OutCol += tex2Dbias(ObjectsSamp, TexCoord6).w * (WT9_2/WT9_NORMALIZE);
    OutCol += tex2Dbias(ObjectsSamp, TexCoord7).w * (WT9_3/WT9_NORMALIZE);
    OutCol += tex2Dbias(ObjectsSamp, TexCoord8).w * (WT9_4/WT9_NORMALIZE);
    OutCol += Trailfade * tex2D(GlowSampler, TexCoord4.xy).x;
#ifdef NOISY_HALO
	float3 nuv = float3((NoiseScale*TexCoord4.xy+(Timer*Crawl)),(Speed*Timer));
    OutCol *= NoiseBright*(NOISE3D(nuv)).x;
#endif /* NOISY_HALO */
    return OutCol.xxxx;
} 

// VertBlur pass

float4 PS_Blur_Vertical_9tap(

			float4 Position   : POSITION,
			float4 Diffuse    : COLOR0,
			float4 TexCoord0   : TEXCOORD0,
			float4 TexCoord1   : TEXCOORD1,
			float4 TexCoord2   : TEXCOORD2,
			float4 TexCoord3   : TEXCOORD3,
			float4 TexCoord4   : TEXCOORD4,
			float4 TexCoord5   : TEXCOORD5,
			float4 TexCoord6   : TEXCOORD6,
			float4 TexCoord7   : TEXCOORD7,
			float4 TexCoord8   : COLOR1,
	
			uniform sampler2D HBlurredSamp : register(s0),
			uniform float Glowness,
			uniform float4 GlowCol
) : COLOR {   
    float OutCol = tex2Dbias(HBlurredSamp, TexCoord0).w * (WT9_1/WT9_NORMALIZE);
    OutCol += tex2Dbias(HBlurredSamp, TexCoord1).w * (WT9_2/WT9_NORMALIZE);
    OutCol += tex2Dbias(HBlurredSamp, TexCoord2).w * (WT9_3/WT9_NORMALIZE);
    OutCol += tex2Dbias(HBlurredSamp, TexCoord3).w * (WT9_4/WT9_NORMALIZE);
    OutCol += tex2Dbias(HBlurredSamp, TexCoord4).w * (WT9_0/WT9_NORMALIZE);
    OutCol += tex2Dbias(HBlurredSamp, TexCoord5).w * (WT9_1/WT9_NORMALIZE);
    OutCol += tex2Dbias(HBlurredSamp, TexCoord6).w * (WT9_2/WT9_NORMALIZE);
    OutCol += tex2Dbias(HBlurredSamp, TexCoord7).w * (WT9_3/WT9_NORMALIZE);
    OutCol += tex2Dbias(HBlurredSamp, TexCoord8).w * (WT9_4/WT9_NORMALIZE);
	// OutCol = OutCol.w * GlowCol;	// all alpha
    float4 glo = (Glowness*OutCol)*GlowCol;
    // float4 OldCol = tex2Dbias(ObjectsSamp, TexCoord0);
    // return OldCol + glo;
    return glo;
} 

// RedrawGlow pass

////////

// just drawn model itself

// add glow on top of model

float4 PS_GlowPass(

	// VS_OUTPUT IN
	float4 Position   : POSITION,
    float4 Diffuse    : COLOR0,
    float4 TexCoord0   : TEXCOORD0,
	
    uniform sampler2D GlowSampler : register(s0)
) : COLOR
{   
	float4 tex = tex2D(GlowSampler, float2(TexCoord0.x, TexCoord0.y));
	return tex;
}  


// RedrawObj pass

float4 PS_OrigPass(

	// VS_OUTPUT IN
	float4 Position   : POSITION,
    float4 Diffuse    : COLOR0,
    float4 TexCoord0   : TEXCOORD0,
	
    uniform sampler2D ObjectsSamp : register(s0)
) : COLOR
{   
	float4 tex = tex2D(ObjectsSamp, float2(TexCoord0.x, TexCoord0.y));
	return tex;
}  