///////////////////////////////////////////////////////////
/////////////////////////////////// Pixel Shaders /////////
///////////////////////////////////////////////////////////

// Relative filter weights indexed by distance (in texels) from "home" texel
//   (WT_0 is the "home" or center of the filter, WT_4 is four texels away)
// Try changing these around for different filter patterns....
#define WT_0 1.0
#define WT_1 0.9
#define WT_2 0.55
#define WT_3 0.18
#define WT_4 0.1
// these ones are based on the above....
#define WT_NORMALIZE (WT_0+2.0*(WT_1+WT_2+WT_3+WT_4))
#define KW_0 (WT_0/WT_NORMALIZE)
#define KW_1 (WT_1/WT_NORMALIZE)
#define KW_2 (WT_2/WT_NORMALIZE)
#define KW_3 (WT_3/WT_NORMALIZE)
#define KW_4 (WT_4/WT_NORMALIZE)

float4 blur9PS(

		float4 Position   : POSITION,
		float2 UV    : TEXCOORD0,
		float4 UV1   : TEXCOORD1, // xy AND zw used as UV coords
		float4 UV2   : TEXCOORD2, // xy AND zw used as UV coords
		float4 UV3   : TEXCOORD3, // xy AND zw used as UV coords
		float4 UV4   : TEXCOORD4, // xy AND zw used as UV coords
		
		uniform sampler2D SrcSamp : register(s0)) : COLOR
{   
    float4 OutCol = tex2D(SrcSamp, UV4.zw) * KW_4;
    OutCol += tex2D(SrcSamp, UV3.zw) * KW_3;
    OutCol += tex2D(SrcSamp, UV2.zw) * KW_2;
    OutCol += tex2D(SrcSamp, UV1.zw) * KW_1;
    OutCol += tex2D(SrcSamp, UV) * KW_0;
    OutCol += tex2D(SrcSamp, UV1.xy) * KW_1;
    OutCol += tex2D(SrcSamp, UV2.xy) * KW_2;
    OutCol += tex2D(SrcSamp, UV3.xy) * KW_3;
    OutCol += tex2D(SrcSamp, UV4.xy) * KW_4;
    return OutCol;
} 

// add glow on top of model

float4 GlowPS(

	float4 Position	: POSITION,
    float2 UV		: TEXCOORD0,
	
	uniform float Glowness,
	uniform float Sceneness,
	uniform sampler2D ScnSampler : register(s0),
	uniform sampler2D GlowSampler : register(s1)
) : COLOR
{   
    float4 scn = Sceneness * tex2D(ScnSampler, UV);
    float3 glow = Glowness * tex2D(GlowSampler, UV).xyz;
    return float4(scn.xyz+glow,scn.w);
}  
