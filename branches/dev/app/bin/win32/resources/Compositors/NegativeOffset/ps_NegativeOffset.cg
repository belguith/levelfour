#define QUAD_FLOAT
#define QUAD_REAL float
#define QUAD_REAL2 float2
#define QUAD_REAL3 float3
#define QUAD_REAL4 float4
#define QUAD_REAL3x3 float3x3
#define QUAD_REAL4x3 float4x3
#define QUAD_REAL3x4 float3x4
#define QUAD_REAL4x4 float4x4 

//////////////////////////////////////////////////////
/////////////////////////////////// pixel shader /////
//////////////////////////////////////////////////////

QUAD_REAL4 negativeOffsetPS(

			QUAD_REAL4 Position	: POSITION,
			QUAD_REAL2 UV	: TEXCOORD0,
	
			uniform float OffX,
			uniform float OffY,
			uniform float Scale,
			uniform float Rot,
			uniform float Density,
		    uniform sampler2D SceneSampler : register(s0)) : COLOR
{   
    float r = radians(Rot);
    float c = cos(r);
    float s = sin(r);
    float2 nuv = Scale*(UV.xy - float2(0.5,0.5));
    nuv = float2(c*nuv.x-s*nuv.y, c*nuv.y+s*nuv.x);
    nuv += float2(0.5+OffX,0.5+OffY);
    QUAD_REAL4 texCol0 = tex2D(SceneSampler, UV);
    QUAD_REAL4 texCol1 = tex2D(SceneSampler, nuv);
    float3 result = saturate(texCol0.rgb - Density*(texCol1.rgb));
    return float4(result,texCol0.w); // protect alpha
}  
