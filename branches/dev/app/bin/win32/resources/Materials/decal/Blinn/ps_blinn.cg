///////// PIXEL SHADING //////////////////////

float4 blinn_PS(
		// Pixel Inputs
		float3 LightVec		: TEXCOORD1,
		float3 WorldView	: TEXCOORD5,
		float3 WorldNormal	: TEXCOORD2,
		float2 UV			: TEXCOORD0,
		
		// Model Level Inputs
		uniform float3 LampColor,
		uniform sampler2D ColorSampler : register(s0),
		// insert shadow and reflection bits here - KB
		uniform float3 AmbiColor,
		uniform float Ks,
		uniform float Eccentricity

		// Outputs - none		
) : COLOR {
    // "standard" normalized vectors....
    float3 Ln = normalize(LightVec);
    float3 Vn = normalize(WorldView);
    float3 Nn = normalize(WorldNormal);
    float3 Hn = normalize(Vn + Ln);
    float hdn = dot(Hn,Nn);
    float3 Rv = reflect(-Ln,Nn);
    float rdv = dot(Rv,Vn);
    rdv = max(rdv,0.001);
    float ldn=dot(Ln,Nn);
    ldn = max(ldn,0.0);
    float ndv = dot(Nn,Vn);
    float hdv = dot(Hn,Vn);
    float eSq = Eccentricity*Eccentricity;
    float distrib = eSq / (rdv * rdv * (eSq - 1.0) + 1.0);
    distrib = distrib * distrib;
    float Gb = 2.0 * hdn * ndv / hdv;
    float Gc = 2.0 * hdn * ldn / hdv;
    float Ga = min(1.0,min(Gb,Gc));
    float fresnelHack = 1.0 - pow(ndv,5.0);
    hdn = distrib * Ga * fresnelHack / ndv;
    float3 diffContrib = ldn * LampColor;
    float3 specContrib = hdn * Ks * LampColor;
    float3 diffuseColor = tex2D(ColorSampler,UV).rgb;
    float3 result = specContrib+(diffuseColor*(diffContrib+AmbiColor));
    // return as float4
    return float4(result,1);
}
