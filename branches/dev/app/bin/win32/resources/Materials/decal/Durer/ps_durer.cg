/******************** pixel shader *********************/

float4 durerPS(
		// Pixel Inputs
		float3 WorldNormal  : TEXCOORD1,
		float3 LightVec  : TEXCOORD3,
		float3 WorldView  : TEXCOORD2,
		float4 ScreenCoord    : TEXCOORD0,
		
		// Model Level Inputs
		uniform float Ks,
		uniform float SpecExpon,
		uniform float4 BaseColor,
		uniform float4 InkColor,
		uniform float4 HilightColor,
		uniform float Darkest,
		uniform sampler2D StripeSampler : register(s0)
) : COLOR {
    float3 Nn = normalize(WorldNormal);
    float3 Ln = normalize(LightVec);
    float3 Vn = normalize(WorldView);
    float3 Hn = normalize(Vn + Ln);
    Nn = faceforward(Nn,-Vn,Nn);
    float ldn = dot(Ln,Nn);
    float hdn = dot(Hn,Nn);
    float4 litV = lit(ldn,hdn,SpecExpon);
    float d = 1.0 - lerp(Darkest,1.0,litV.y);
    float s = 1.0 - litV.z;
    float stripes = tex2D(StripeSampler,float2(ScreenCoord.x,d)).x;
    float4 dColor = lerp(BaseColor,InkColor,stripes);
    stripes = tex2D(StripeSampler,float2(ScreenCoord.y,s)).x;
    dColor = lerp(HilightColor,dColor,stripes);
    return dColor;
}

// Texture version
float4 durerPS_t(
		// Pixel Inputs
		float3 WorldNormal  : TEXCOORD1,
		float3 LightVec  : TEXCOORD3,
		float3 WorldView  : TEXCOORD2,
		float4 ScreenCoord    : TEXCOORD0,
		
		// Model Level Inputs
	    uniform sampler2D ColorSampler : register(s0),
	    uniform float Ks,
	    uniform float SpecExpon,
	    uniform float4 BaseColor,
	    uniform float4 InkColor,
	    uniform float4 HilightColor,
	    uniform float Darkest,
	    uniform sampler2D StripeSampler : register(s1)
) : COLOR {
    float3 Nn = normalize(WorldNormal);
    float3 Ln = normalize(LightVec);
    float3 Vn = normalize(WorldView);
    float3 Hn = normalize(Vn + Ln);
    Nn = faceforward(Nn,-Vn,Nn);
    float ldn = dot(Ln,Nn);
    float hdn = dot(Hn,Nn);
    float4 litV = lit(ldn,hdn,SpecExpon);
    float d = 1.0 - lerp(Darkest,1.0,litV.y);
    float s = 1.0 - litV.z;
    float4 texC = tex2D(ColorSampler,ScreenCoord.zw);
    float stripes = tex2D(StripeSampler,float2(ScreenCoord.x,d)).x;
    float4 dColor = lerp(BaseColor*texC,InkColor,stripes);
    stripes = tex2D(StripeSampler,float2(ScreenCoord.y,s)).x;
    dColor = lerp(HilightColor,dColor,stripes);
    return dColor;
}

////////////////////////////////////////////
// Utility Functions ///////////////////////
////////////////////////////////////////////

#define _SS uniform sampler2D StripeSampler

// base function: "Balance" is in W term
float stripe(float4 XYZW,_SS) { return tex2D(StripeSampler,XYZW.xw).x; }

float stripe(float4 XYZW,float Balance,_SS) {
    return stripe(float4(XYZW.xyz,Balance),StripeSampler); }

float stripe(float3 XYZ,float Balance,_SS) {
    return stripe(float4(XYZ.xyz,Balance),StripeSampler); }

float stripe(float2 XY,float Balance,_SS) {
    return stripe(float4(XY.xyy,Balance),StripeSampler); }

float stripe(float X,float Balance,_SS) {
    return stripe(float4(X.xxx,Balance),StripeSampler); }

// use default balance (can't do float4 version, would interfere): //

float stripe(float3 XYZ,_SS) {
    return stripe(float4(XYZ.xyz,DEFAULT_BALANCE),StripeSampler); }

float stripe(float2 XY,_SS) {
    return stripe(float4(XY.xyy,DEFAULT_BALANCE),StripeSampler); }

float stripe(float X,_SS) {
    return stripe(float4(X.xxx,DEFAULT_BALANCE),StripeSampler); }

///////////////////////////////////
// texture-free alternative ///////
///////////////////////////////////

float numeric_stripe(
	    float Value,
	    float Balance,
	    float Oversample,
	    float PatternScale
) {
    float width = abs(ddx(Value)) + abs(ddy(Value));
    float w = width*Oversample;
    float x0 = Value/PatternScale - (w/2.0);
    float x1 = x0 + w;
    float i0 = (1.0-Balance)*floor(x0) + max(0.0, frac(x0)-Balance);
    float i1 = (1.0-Balance)*floor(x1) + max(0.0, frac(x1)-Balance);
    float stripe = (i1 - i0)/w;
    stripe = min(1.0,max(0.0,stripe)); 
    return stripe;
}

///////////////////////////////////
// 2D checkerboard ////////////////
///////////////////////////////////

float checker2D(float4 XYZW,_SS)
{
    float stripex = tex2D(StripeSampler,XYZW.xw).x;
    float stripey = tex2D(StripeSampler,XYZW.yw).x;
    return abs(stripex - stripey);
}

// overloads of the above

float checker2D(float4 XYZW,float Balance,_SS) {
    return checker2D(float4(XYZW.xyz,Balance),StripeSampler); }

float checker2D(float3 XYZ,float Balance,_SS) {
    return checker2D(float4(XYZ.xyz,Balance),StripeSampler); }

float checker2D(float2 XY,float Balance,_SS) {
    return checker2D(float4(XY.xyy,Balance),StripeSampler); }

// use default balance ////////////////////////

float checker2D(float3 XYZ,_SS) {
    return checker2D(float4(XYZ.xyz,DEFAULT_BALANCE),StripeSampler); }

float checker2D(float2 XY,_SS) {
    return checker2D(float4(XY.xyy,DEFAULT_BALANCE),StripeSampler); }

float checker2D(float X,_SS) {
    return checker2D(float4(X.xxx,DEFAULT_BALANCE),StripeSampler); }

///////////////////////////////////
// 3D checkerboard ////////////////
///////////////////////////////////

float checker3D(float4 XYZW,_SS)
{
    float stripex = tex2D(StripeSampler,XYZW.xw).x;
    float stripey = tex2D(StripeSampler,XYZW.yw).x;
    float stripez = tex2D(StripeSampler,XYZW.zw).x;
    float check = abs(abs(stripex - stripey) - stripez);
    return check;
}

// overloads of the above

float checker3D(float3 XYZ,float Balance,_SS) {
    return checker3D(float4(XYZ.xyz,Balance),StripeSampler); }

float checker3D(float4 XYZW,float Balance,_SS) {
    return checker3D(float4(XYZW.xyz,Balance),StripeSampler); }

// use default balance ////////////////////////

float checker3D(float3 XYZ,_SS) {
    return checker3D(float4(XYZ.xyz,DEFAULT_BALANCE),StripeSampler); }

float checker3D(float2 XY,_SS) {
    return checker3D(float4(XY.xyy,DEFAULT_BALANCE),StripeSampler); }

float checker3D(float X,_SS) {
    return checker3D(float4(X.xxx,DEFAULT_BALANCE),StripeSampler); }

/////////////

float3 checker3Drgb(float4 XYZW,_SS)
{
    float3 result;
    result.x = tex2D(StripeSampler,XYZW.xw).x;
    result.y = tex2D(StripeSampler,XYZW.yw).x;
    result.z = tex2D(StripeSampler,XYZW.zw).x;
    return result;
}

float3 checker3Drgb(float3 XYZ,float Balance,_SS) {
    return checker3Drgb(float4(XYZ.xyz,Balance),StripeSampler); }

float3 checker3Drgb(float3 XYZ,_SS) {
    return checker3Drgb(float4(XYZ.xyz,DEFAULT_BALANCE),StripeSampler); }
