/*********************************************************************NVMH3****
*******************************************************************************
$Revision: #3 $

Copyright NVIDIA Corporation 2008
TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED
*AS IS* AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS
BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES
WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PECUNIARY
LOSS) ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF
NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

% This effect is intended to look like pen crosshatching -- it was
% inspired by the British Museums Durer exhibit of 2003. Some of
% Durer's most famous drawings were made in two colors of ink on
% medium-colored paper. The diffuse shape rendering was drawn in
% cross-hatches in a dark ink


To learn more about shading, shaders, and to bounce ideas off other shader
    authors and users, visit the NVIDIA Shader Library Forums at:

    http://developer.nvidia.com/forums/

*******************************************************************************
******************************************************************************/

/*****************************************************************/
/*** HOST APPLICATION IDENTIFIERS ********************************/
/*** Potentially predefined by varying host environments *********/
/*****************************************************************/

// #define _XSI_		/* predefined when running in XSI */

#ifndef FXCOMPOSER_VERSION	/* for very old versions */
#define FXCOMPOSER_VERSION 180
#endif /* FXCOMPOSER_VERSION */

// #define FLIP_TEXTURE_Y	/* Different in OpenGL & DirectX */

/*****************************************************************/
/*** EFFECT-SPECIFIC CODE BEGINS HERE ****************************/
/*****************************************************************/

/******* Lighting Macros *******/
/** To use "Object-Space" lighting definitions, change these two macros: **/
#define LIGHT_COORDS "World"
// #define OBJECT_SPACE_LIGHTS /* Define if LIGHT_COORDS is "Object" */
/** Define the macro USE_SHARED_SHADOW to permit the import and use of "shared
		surface "shadow maps created by COLLADA-FX. **/
// #define USE_SHARED_SHADOW


float Script : STANDARDSGLOBAL <
    string UIWidget = "none";
    string ScriptClass = "object";
    string ScriptOrder = "standard";
    string ScriptOutput = "color";
//  string Script = "Technique=Technique?Main:Textured;";
> = 0.8;

#include "include/stripe_tex.cgh"

/**** UNTWEAKABLES: Hidden & Automatically-Tracked Parameters **********/

// transform object vertices to world-space:
float4x4 gWorldXf : World < string UIWidget="None"; >;
// transform object normals, tangents, & binormals to world-space:
float4x4 gWorldITXf : WorldInverseTranspose < string UIWidget="None"; >;
// transform object vertices to view space and project them in perspective:
float4x4 gWvpXf : WorldViewProjection < string UIWidget="None"; >;
// provide tranform from "view" or "eye" coords back to world-space:
float4x4 gViewIXf : ViewInverse < string UIWidget="None"; >;
float4x4 gWorldViewXf  : WORLDVIEW < string UIWidget="None"; >;

/******** TWEAKABLES ****************************************/

float3 gSpotLamp0Pos : POSITION <
    string Object = "SpotLight0";
    string UIName =  "Lamp 0 Position";
    string Space = (LIGHT_COORDS);
> = {-0.5f,2.0f,1.25f};

float4 gBaseColor <
    string UIName = "Base Background";
    string UIWidget = "Color";
> = {0.5f, 0.5f, 0.5f, 1.0f};

float4 gInkColor <
    string UIName = "Dark Ink";
    string UIWidget = "Color";
> = {0.1f, 0.05f, 0.0f, 1.0f};

float4 gHilightColor <
    string UIName = "Bright Paint";
    string UIWidget = "Color";
> = {1.0f, 1.0f, 1.0f, 1.0f};

float gDarkest <
    string units = "inches";
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 0.6;
    float UIStep = 0.001;
    string UIName = "Darkest Ink Shade";
> = 0.00;

float gKs <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.05;
    string UIName =  "Specular";
> = 0.4;

float gSpecExpon <
    string UIWidget = "slider";
    float UIMin = 1.0;
    float UIMax = 128.0;
    float UIStep = 1.0;
    string UIName =  "Specular Exponent";
> = 30.0;

//

float gStripeScale <
    string UIWidget = "slider";
    float UIMin = 0.001;
    float UIMax = 1.0;
    float UIStep = 0.001;
    string UIName = "Dark Ink Stroke Size";
> = 0.035;

float gSpecScale <
    string UIWidget = "slider";
    float UIMin = 0.001;
    float UIMax = 1.0;
    float UIStep = 0.001;
    string UIName = "Bright Paint Stroke Size";
> = 0.02;

float gRotD <
    string UIWidget = "slider";
    float UIMin = -180.00;
    float UIMax = 180.0;
    float UIStep = 0.01;
    string UIName = "Rotate Dark Hatching";
> = 20.0;

float gRotS <
    string UIWidget = "slider";
    float UIMin = -180.00;
    float UIMax = 180.0;
    float UIStep = 0.01;
    string UIName = "Rotate Bright Hatching";
> = 100.0;

texture gColorTexture  <
    string ResourceName = "default_color.dds";
    string UIName =  "Diffuse Texture";
    string ResourceType = "2D";
>;

sampler2D gColorSampler = sampler_state {
    Texture = <gColorTexture>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
};

#ifdef USE_SHARED_SHADOW
#define MAX_SHADOW_BIAS 0.01
#define MIN_SHADOW_BIAS 0.00005
#include "include/shadowMap.cgh"
DECLARE_SHADOW_XFORMS("SpotLight0",gLampViewXf,gLampProjXf,gShadowViewProjXf)
DECLARE_SHADOW_BIAS
DECLARE_SHADOW_MAPS(ColorShadTarget,ColorShadSampler,DepthShadTarget,DepthShadSampler)

float ShadDens <
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.01;
    string UIName =  "Shadow Density";
> = 0.7;
#endif /* USE_SHARED_SHADOW */


/************* DATA STRUCTS **************/

/* data from application vertex buffer */
struct appdata {
    float4 Position    : POSITION;
    float4 UV        : TEXCOORD0;
    float4 Normal    : NORMAL;
};

/* data passed from vertex shader to pixel shader */
struct durerVertexOutput {
    float4 HPosition    : POSITION;
    float4 ScreenCoord    : TEXCOORD0; // pack UV in here too
    float3 WorldNormal  : TEXCOORD1;
    float3 WorldView  : TEXCOORD2;
    float3 LightVec  : TEXCOORD3;
#ifdef USE_SHARED_SHADOW
    float4 LProj	: LPROJ_COORD;
#endif /* USE_SHARED_SHADOW */
};

/*********** vertex shader ******/

durerVertexOutput durerVS(appdata IN,
    uniform float4x4 WorldITXf, // our four standard "untweakable" xforms
	uniform float4x4 WorldXf,
	uniform float4x4 ViewIXf,
	uniform float4x4 WvpXf,
    uniform float4x4 WorldViewXf,
    uniform float3 SpotlampPos,
    uniform float StripeScale,
    uniform float SpecScale,
    uniform float RotD,
    uniform float RotS
) {
    durerVertexOutput OUT = (durerVertexOutput)0;
    float4 Po = float4(IN.Position.xyz,1.0);
    float3 Pw = mul(WorldXf,Po).xyz;
    float3 Pv = mul(WorldViewXf,Po).xyz;
    OUT.WorldNormal = normalize(mul(WorldITXf,IN.Normal)).xyz;
    OUT.LightVec = normalize(SpotlampPos - Pw);
    OUT.WorldView = normalize(float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w) - Pw);
    float4 hpos  = mul(WvpXf,Po);
    OUT.HPosition  = hpos;
    float radD = radians(RotD);
    float radS = radians(RotS);
    float cosD = cos(radD);
    float sinD = sin(radD);
    float cosS = cos(radS);
    float sinS = sin(radS);
    float2 Ps = float2(hpos.x/hpos.w,hpos.y/hpos.w);
    float2 Pdiff = float2(cosD*Ps.x - sinD*Ps.y,sinD*Ps.x + cosD*Ps.y);
    float2 Pspec = float2(cosS*Ps.x - sinS*Ps.y,sinS*Ps.x + cosS*Ps.y);
#ifdef FLIP_TEXTURE_Y
    float2 uv = float2(IN.UV.x,(1.0-IN.UV.y));
#else /* !FLIP_TEXTURE_Y */
    float2 uv = IN.UV.xy;
#endif /* !FLIP_TEXTURE_Y */
    OUT.ScreenCoord = float4(Pdiff.x/StripeScale,Pspec.x/SpecScale,uv.xy);
#ifdef USE_SHARED_SHADOW
    float4 Pl = mul(ShadowViewProjXf,float4(Pw.xyz,1.0));  // "P" in light coords
    float4x4 BiasXf = make_bias_mat(ShadBias);
    OUT.LProj = mul(BiasXf,Pl);		// bias to make texcoord
#endif /* USE_SHARED_SHADOW */
    return OUT;
}

/******************** pixel shader *********************/

float4 durerPS(durerVertexOutput IN,
		uniform float Ks,
		uniform float SpecExpon,
		uniform float4 BaseColor,
		uniform float4 InkColor,
		uniform float4 HilightColor,
		uniform float Darkest,
		uniform sampler2D StripeSampler
) : COLOR {
    float3 Nn = normalize(IN.WorldNormal);
    float3 Ln = normalize(IN.LightVec);
    float3 Vn = normalize(IN.WorldView);
    float3 Hn = normalize(Vn + Ln);
    Nn = faceforward(Nn,-Vn,Nn);
    float ldn = dot(Ln,Nn);
    float hdn = dot(Hn,Nn);
    float4 litV = lit(ldn,hdn,SpecExpon);
#ifdef USE_SHARED_SHADOW
    float shadowed = tex2Dproj(DepthShadSampler,IN.LProj).x;
	float faded = 1.0-(ShadDens*(1.0-shadowed));
	litV.y *= faded;
	litV.z *= shadowed;
#endif /* USE_SHARED_SHADOW */
    float d = 1.0 - lerp(Darkest,1.0,litV.y);
    float s = 1.0 - litV.z;
    float stripes = tex2D(StripeSampler,float2(IN.ScreenCoord.x,d)).x;
    float4 dColor = lerp(BaseColor,InkColor,stripes);
    stripes = tex2D(StripeSampler,float2(IN.ScreenCoord.y,s)).x;
    dColor = lerp(HilightColor,dColor,stripes);
    return dColor;
}

float4 durerPS_t(durerVertexOutput IN,
	    uniform sampler2D ColorSampler,
	    uniform float Ks,
	    uniform float SpecExpon,
	    uniform float4 BaseColor,
	    uniform float4 InkColor,
	    uniform float4 HilightColor,
	    uniform float Darkest,
	    uniform sampler2D StripeSampler
) : COLOR {
    float3 Nn = normalize(IN.WorldNormal);
    float3 Ln = normalize(IN.LightVec);
    float3 Vn = normalize(IN.WorldView);
    float3 Hn = normalize(Vn + Ln);
    Nn = faceforward(Nn,-Vn,Nn);
    float ldn = dot(Ln,Nn);
    float hdn = dot(Hn,Nn);
    float4 litV = lit(ldn,hdn,SpecExpon);
#ifdef USE_SHARED_SHADOW
    float shadowed = tex2Dproj(DepthShadSampler,IN.LProj).x;
	float faded = 1.0-(ShadDens*(1.0-shadowed));
	litV.y *= faded;
	litV.z *= shadowed;
#endif /* USE_SHARED_SHADOW */
    float d = 1.0 - lerp(Darkest,1.0,litV.y);
    float s = 1.0 - litV.z;
    float4 texC = tex2D(ColorSampler,IN.ScreenCoord.zw);
    float stripes = tex2D(StripeSampler,float2(IN.ScreenCoord.x,d)).x;
    float4 dColor = lerp(BaseColor*texC,InkColor,stripes);
    stripes = tex2D(StripeSampler,float2(IN.ScreenCoord.y,s)).x;
    dColor = lerp(HilightColor,dColor,stripes);
    return dColor;
}

///////////////////////////////////////
/// TECHNIQUES ////////////////////////
///////////////////////////////////////

///////////////////////////////////////
/// TECHNIQUES ////////////////////////
///////////////////////////////////////

technique Main <
	string Script = "Pass=p0;";
> {
    pass p0 <
	string Script = "Draw=geometry;";
    > {
        VertexProgram = compile vp40 durerVS(gWorldITXf,gWorldXf,
				gViewIXf,gWvpXf,
		    gWorldViewXf,gSpotLamp0Pos,
		    gStripeScale,gSpecScale,
		    gRotD,gRotS);
		DepthTestEnable = true;
		DepthMask = true;
		CullFaceEnable = false;
		BlendEnable = false;
		DepthFunc = LEqual;
        FragmentProgram = compile fp40 durerPS(gKs,gSpecExpon,
		    gBaseColor,gInkColor,gHilightColor,
		    gDarkest,gStripeSampler);
    }
}


technique Textured <
	string Script = "Pass=p0;";
> {
    pass p0 <
	string Script = "Draw=geometry;";
    > {
        VertexProgram = compile vp40 durerVS(gWorldITXf,gWorldXf,
				gViewIXf,gWvpXf,
		    gWorldViewXf,gSpotLamp0Pos,
		    gStripeScale,gSpecScale,
		    gRotD,gRotS);
		DepthTestEnable = true;
		DepthMask = true;
		CullFaceEnable = false;
		BlendEnable = false;
		DepthFunc = LEqual;
        FragmentProgram = compile fp40 durerPS_t(gColorSampler,
		    gKs,gSpecExpon,
		    gBaseColor,gInkColor,gHilightColor,
		    gDarkest,gStripeSampler);
    }
}

/***************************** eof ***/
