/*********************************************************************NVMH3****
*******************************************************************************
$Revision: #4 $

Copyright NVIDIA Corporation 2008
TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED
*AS IS* AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS
BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES
WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PECUNIARY
LOSS) ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF
NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

% A wet-glossy surface, a little smoke & mirrors to make things ultra-shiny.
% Glossiness is controlled not only by the usual power function, but also
% by applying a set of gloss controls that cause a sharp falloff across
% a specified range.
%     The falloff will occur in the highlight range [glossBot-glossTop] and the
% amount of falloff is specified by "glossDrop." Setting "glossDrop"
% to 1.0 nullifies the effect.

*******************************************************************************
******************************************************************************/

/*********** vertex shader ******/

void gwh_VS(
	// Vertex Inputs
	float4 Normal	: NORMAL,
	float4 Tangent	: TANGENT0,
	float4 Binormal	: BINORMAL0,
	float3 Position	: POSITION,
	float4 UVIN	: TEXCOORD0,

	// Outputs
	out float4 HPosition 		: POSITION,	
	out float3 WorldNormal		: TEXCOORD2,
	out float3 WorldTangent		: TEXCOORD3,
	out float3 WorldBinormal 	: TEXCOORD4,
	out float3 WorldView		: TEXCOORD5,
	out float3 LightVec		: TEXCOORD1,
	out float2 UV			: TEXCOORD0,
		
	// Model Level Inputs
	uniform float4x4 WorldITXf, // our four standard "untweakable" xforms
	uniform float4x4 WorldXf,
	uniform float4x4 ViewIXf,
	uniform float4x4 WvpXf,
	uniform float3 LampPos) 
{
    WorldNormal = mul(WorldITXf,Normal).xyz;
    WorldTangent = mul(WorldITXf,Tangent).xyz;
    WorldBinormal = mul(WorldITXf,Binormal).xyz;
    float4 Po = float4(Position.xyz,1); // homogeneous location
    float4 Pw = mul(WorldXf,Po);	// convert to "world" space
    LightVec = (LampPos - Pw.xyz);
    UV = UVIN.xy;
    WorldView = normalize(float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w) - Pw.xyz);
    HPosition = mul(WvpXf,Po);
}