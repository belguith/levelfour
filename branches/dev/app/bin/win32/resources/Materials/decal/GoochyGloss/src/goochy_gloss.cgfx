/*********************************************************************NVMH3****
$Id: //sw/devtools/ShaderLibrary/main/CgFX/goochy_gloss.cgfx#1 $

Copyright NVIDIA Corporation 2002-2007
TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED
*AS IS* AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS
BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES
WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS)
ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF NVIDIA HAS
BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.


% Gooch style diffuse shading, calculated PER-PIXEL against a
% directional light source, and with optional texture-mapping.
% This version also contains a glossy hilight with threshholding to
% create a strong impression of surface smoothness.  Gooch shading
% ranges from a warm tone near the light direction to a cool tone
% on the opposite side of a model. While non-photorealistic, this
% approach is useful for revealing overall shape of a form,
% especially when modelling.

keywords: classic material 

******************************************************************************/

float Script : STANDARDSGLOBAL 
<
    string UIWidget = "none";
    string ScriptClass = "object";
    string ScriptOrder = "standard";
    string ScriptOutput = "color";
    string Script = "Technique=Technique?Basic:Textured;";
> = 0.8;
 
float4x4 WorldITXf : WorldInverseTranspose < string UIWidget="None"; >;
float4x4 WVPXf : WorldViewProjection < string UIWidget="None"; >;
float4x4 ViewIXf : ViewInverse < string UIWidget="None"; >;
float4x4 WorldXf : World < string UIWidget="None"; >;

////////////////////////////////////////////

float4 LightDir : Direction <
	string Object = "DirectionalLight";
	string UIName = "Lamp Direction";
	string Space = "World";
> = {0.7f, -0.7f, 0.7f, 0.0f};

float3 LiteColor : Diffuse
<
    string UIName =  "Bright Surface Color";
    string UIWidget = "Color";
> = {0.8f, 0.5f, 0.1f};

float3 DarkColor : Diffuse 
<
    string UIName =  "Dark Surface Color";
    string UIWidget = "Color";
> = {0.0f, 0.0f, 0.0f};

float3 WarmColor : Diffuse 
<
    string UIName =  "Gooch warm tone";
    string UIWidget = "Color";
> = {0.5f, 0.4f, 0.05f};

float3 CoolColor : Diffuse 
<
    string UIName =  "Gooch cool tone";
    string UIWidget = "Color";
> = {0.05f, 0.05f, 0.6f};

float3 SpecColor : Specular <
    string UIName =  "Hilight color";
    string UIWidget = "Color";
> = {0.7f, 0.7f, 1.0f};

///////

float SpecExpon : SpecularPower <
    string UIWidget = "slider";
    float UIMin = 1.0;
    float UIMax = 128.0;
    float UIStep = 1.0;
    string UIName =  "Specular Power";
> = 20.0;

float GlossTop 
<
    string UIWidget = "slider";
    float UIMin = 0.2;
    float UIMax = 1.0;
    float UIStep = 0.05;
    string UIName =  "Maximum for Gloss Dropoff";
> = 0.7;

float GlossBot
<
    string UIWidget = "slider";
    float UIMin = 0.05;
    float UIMax = 0.95;
    float UIStep = 0.05;
    string UIName =  "Minimum for Gloss Dropoff";
> = 0.5;

float GlossDrop
<
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.05;
    string UIName =  "Strength of Glossy Dropoff";
> = 0.2;

///////////////////

texture ColorMap : Diffuse 
<
    string ResourceName = "default_color.dds";
    string ResourceType = "2D";
>;

sampler2D ColorSampler = sampler_state
{
    Texture = <ColorMap>;
    MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
    WrapS = Repeat;
    WrapT = Repeat;
};

//////////////////

struct appdata 
{
    float3 Position    : POSITION;
    float4 UV        : TEXCOORD0;
    float4 Normal    : NORMAL;
};

struct vertexOutput 
{
    float4 HPosition    : POSITION;
    float2 UV    : TEXCOORD0;
    float3 LightVec    : TEXCOORD1;
    float3 WorldNormal    : TEXCOORD2;
    float3 WorldView    : TEXCOORD3;
 };

////////////////////////////////////////////////////////////////////
/// SHADER FUNCTIONS ///////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

vertexOutput mainVS(appdata IN)
{
    vertexOutput OUT = (vertexOutput)0;
    float4 Nn = normalize(IN.Normal);	// in "object" coordinates
    OUT.WorldNormal = mul(WorldITXf, Nn).xyz;
    float4 Po = float4(IN.Position.xyz,1);
    float3 Pw = mul(WorldXf, Po).xyz;	// in "world" coordinates
    OUT.LightVec = -normalize(LightDir);
    OUT.UV = IN.UV.xy;
    OUT.WorldView = normalize(float3(ViewIXf[0].w, ViewIXf[1].w, ViewIXf[2].w) - Pw);
    OUT.HPosition = mul(WVPXf, Po);
    return OUT;
}

////////////////////////////////////////////////

void gooch_shared(vertexOutput IN,
        out float4 DiffuseContrib,
        out float4 SpecularContrib)
{
    float3 Ln = IN.LightVec;
    float3 Nn = normalize(IN.WorldNormal);
    float3 Vn = normalize(IN.WorldView);
    float3 Hn = normalize(Vn + Ln);
    float hdn = pow(max(0, dot(Hn, Nn)), SpecExpon);
    hdn = hdn * (GlossDrop + smoothstep(GlossBot, GlossTop, hdn) * (1.0 - GlossDrop));
    SpecularContrib = float4((hdn * SpecColor),1);
    float ldn = dot(Ln, Nn);
    float mixer = 0.5 * (ldn + 1.0);
    float diffComp = max(0, ldn);
    float3 surfColor = lerp(DarkColor, LiteColor, mixer);
    float3 toneColor = lerp(CoolColor, WarmColor, mixer);
    DiffuseContrib = float4((surfColor + toneColor), 1);
}

float4 gooch_PS(vertexOutput IN) :COLOR
{
    float4 diffContrib;
    float4 specContrib;
    gooch_shared(IN,diffContrib, specContrib);
    float4 result = diffContrib + specContrib;
    return result;
}

float4 goochT_PS(vertexOutput IN) :COLOR
{
    float4 diffContrib;
    float4 specContrib;
    gooch_shared(IN, diffContrib, specContrib);
    float4 result = tex2D(ColorSampler, IN.UV.xy) * diffContrib + specContrib;
    return result;
}

////////////////////////////////////////////////////////////////////
/// TECHNIQUES /////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

technique Basic < string Script = "Pass=p0;"; > 
{
    pass p0 < string Script = "Draw=geometry;"; > 
    {
        CullFace = Back;
        DepthTestEnable=true;
        DepthFunc = LEqual;
        VertexProgram = compile arbvp1 mainVS();
        FragmentProgram = compile arbfp1 gooch_PS();
    }
}

technique Textured < string Script = "Pass=p0;"; > 
{
    pass p0 < string Script = "Draw=geometry;"; > 
    {        
        CullFace = Back;
        DepthTestEnable=true;
        DepthFunc = LEqual;
        VertexProgram = compile arbvp1 mainVS();        
        FragmentProgram = compile arbfp1 goochT_PS();
    }
}

////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////// eof ////
////////////////////////////////////////////////////////////////////
