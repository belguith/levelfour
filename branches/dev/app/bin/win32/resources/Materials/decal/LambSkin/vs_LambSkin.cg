///////////////////////////////////////////////
// Shared "lambskin" diffuse function /////////
///////////////////////////////////////////////

//
// vectors are assumed to be normalized as needed
//
void lambskin(float3 N,
	      float3 L,
	      float3 DiffColor,
	      float3 SubColor,
	      uniform float RollOff,
	      out float3 Diffuse,
	      out float3 Subsurface
) {
    float ldn = dot(L,N);
    float diffComp = max(0,ldn);
    Diffuse = diffComp * DiffColor;
    float subLamb = smoothstep(-RollOff,1.0,ldn) - smoothstep(0.0,1.0,ldn);
    subLamb = max(0.0,subLamb);
    Subsurface = subLamb * SubColor;
}

/*********** vertex shader ******/

void lambVS(

	float3 Position	: POSITION,
    float4 UVIN		: TEXCOORD0,
    float4 Normal	: NORMAL,
    float4 Tangent	: TANGENT0,
    float4 Binormal	: BINORMAL0,
	
	out float4 HPosition	: POSITION,
    out float2 UV		: TEXCOORD0,
    out float4 diffCol	: COLOR0,
	
    uniform float4x4 WorldITXf, // our four standard "untweakable" xforms
	uniform float4x4 WorldXf,
	uniform float4x4 ViewIXf,
	uniform float4x4 WvpXf,
    uniform float3 DiffColor,
    uniform float3 SubColor,
    uniform float RollOff,
    uniform float3 LampPos,
    uniform float3 AmbiColor
) {
    float3 Nn = normalize(mul(WorldITXf,Normal).xyz);
    float4 Po = float4(Position.xyz,1);
    float3 Pw = mul(WorldXf,Po).xyz;
    float3 Ln = normalize(LampPos - Pw);
    float3 diffContrib;
    float3 subContrib;
	lambskin(Nn,Ln,
		DiffColor,SubColor,RollOff,
		diffContrib,subContrib);
    diffCol.rgb = diffContrib + AmbiColor + subContrib;
    diffCol.a = 1.0;
    UV = UVIN.xy;
    HPosition = mul(WvpXf,Po);
}

/*********** Generic Vertex Shader ******/

void std_VS(

	float3 Position	: POSITION,
    float4 UVIN		: TEXCOORD0,
    float4 Normal	: NORMAL,
    float4 Tangent	: TANGENT0,
    float4 Binormal	: BINORMAL0,
	
	out float4 HPosition	: POSITION,
    out float2 UV		: TEXCOORD0,
    out float3 LightVec	: TEXCOORD1,
    out float3 WorldNormal	: TEXCOORD2,
    out float3 WorldTangent	: TEXCOORD3,
    out float3 WorldBinormal : TEXCOORD4,
    out float3 WorldView	: TEXCOORD5,
	
	uniform float4x4 WorldITXf, // our four standard "untweakable" xforms
	uniform float4x4 WorldXf,
	uniform float4x4 ViewIXf,
	uniform float4x4 WvpXf,
	uniform float3 LampPos) 
{
    WorldNormal = mul(WorldITXf,Normal).xyz;
    WorldTangent = mul(WorldITXf,Tangent).xyz;
    WorldBinormal = mul(WorldITXf,Binormal).xyz;
    float4 Po = float4(Position.xyz,1); // homogeneous location
    float4 Pw = mul(WorldXf,Po);	// convert to "world" space
    LightVec = (LampPos - Pw.xyz);
    UV = UVIN.xy;
    WorldView = normalize(float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w) - Pw.xyz);
    HPosition = mul(WvpXf,Po);
}