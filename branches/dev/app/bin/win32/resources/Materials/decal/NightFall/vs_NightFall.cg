/*********************************************************/
/*********** vertex shader *******************************/
/*********************************************************/

float4x4 nvYRotateXf(float A) {
	float s = sin(A);
	float c = cos(A);
	return float4x4(c,0,s,0,
					0,1,0,0,
					-s,0,c,0,
					0,0,0,1);
}

// a very standard vertex shader, with the addition the timer-based
//      rotation
void nightfallVS(

	float3 Position	: POSITION,
    float4 UVIN		: TEXCOORD0,
    float4 Normal	: NORMAL,
    float4 Tangent	: TANGENT0,
    float4 Binormal	: BINORMAL0,
	
	out float4 HPosition	: POSITION,
    out float2 UV		: TEXCOORD0,
    out float3 LightVec	: TEXCOORD1,
    out float3 WorldNormal	: TEXCOORD2,
    out float3 WorldTangent	: TEXCOORD3,
    out float3 WorldBinormal : TEXCOORD4,
    out float3 WorldView	: TEXCOORD5,
	
	uniform float4x4 WorldITXf, // our four standard "untweakable" xforms
	uniform float4x4 WorldXf,
	uniform float4x4 ViewIXf,
	uniform float4x4 WvpXf,
	uniform float3 LampDir,
    uniform float Timer,
    uniform float Speed
) {
    // rotation matrix created here
    float4x4 RXf = nvYRotateXf(Timer*Speed);
    float4x4 RnXf = mul(WorldITXf,RXf);
    // then use RnXf instead of WorldITXf
    WorldNormal = mul(RnXf,Normal).xyz;
    WorldTangent = mul(RnXf,Tangent).xyz;
    WorldBinormal = mul(RnXf,Binormal).xyz;
    float4 Po = float4(Position.xyz,1.0);	// object coordinates
    Po = mul(RXf,Po);
    float3 Pw = mul(WorldXf,Po).xyz;		// world coordinates
    UV = UVIN.xy;
    WorldView = normalize(float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w) - Pw);	// obj coords
    LightVec = -normalize(LampDir).xyz;
    HPosition = mul(WvpXf,Po);	// screen clipspace coords
}