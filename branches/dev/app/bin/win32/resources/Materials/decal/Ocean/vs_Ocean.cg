// wave functions ///////////////////////

struct Wave {
  float freq;  // 2*PI / wavelength
  float amp;   // amplitude
  float phase; // speed * 2*PI / wavelength
  float2 dir;
};

#define NWAVES 2
Wave wave[NWAVES] = {
	{ 1.0, 1.0, 0.5, float2(-1, 0) },
	{ 2.0, 0.5, 1.3, float2(-0.7, 0.7) }	
};

float evaluateWave(Wave w, float2 pos, float t)
{
  return w.amp * sin( dot(w.dir, pos)*w.freq + t*w.phase);
}

// derivative of wave function
float evaluateWaveDeriv(Wave w, float2 pos, float t)
{
  return w.freq*w.amp * cos( dot(w.dir, pos)*w.freq + t*w.phase);
}

// sharp wave functions
float evaluateWaveSharp(Wave w, float2 pos, float t, float k)
{
  return w.amp * pow(sin( dot(w.dir, pos)*w.freq + t*w.phase)* 0.5 + 0.5 , k);
}

float evaluateWaveDerivSharp(Wave w, float2 pos, float t, float k)
{
  return k*w.freq*w.amp * pow(sin( dot(w.dir, pos)*w.freq + t*w.phase)* 0.5 + 0.5 , k - 1) * cos( dot(w.dir, pos)*w.freq + t*w.phase);
}

///////// SHADER FUNCTIONS ///////////////

void OceanVS(

	float4 Position : POSITION,
	float2 UVIN : TEXCOORD0,
	
	out float4 HPosition  : POSITION,  // in clip space
    out float2 UV  : TEXCOORD0,
    out float3 T2WXf1 : TEXCOORD1, // first row of the 3x3 transform from tangent to cube space
    out float3 T2WXf2 : TEXCOORD2, // second row of the 3x3 transform from tangent to cube space
    out float3 T2WXf3 : TEXCOORD3, // third row of the 3x3 transform from tangent to cube space
    out float2 bumpUV0 : TEXCOORD4,
    out float2 bumpUV1 : TEXCOORD5,
    out float2 bumpUV2 : TEXCOORD6,
    out float3 WorldView  : TEXCOORD7,
    
	uniform float4x4 WorldITXf, // our four standard "untweakable" xforms
	uniform float4x4 WorldXf,
	uniform float4x4 ViewIXf,
	uniform float4x4 WvpXf,
    uniform float Timer,
    uniform float WaveAmp,
    uniform float WaveFreq,
    uniform float BumpScale,
    uniform float TexReptX,
    uniform float TexReptY,
    uniform float BumpSpeedX,
    uniform float BumpSpeedY
) {
    wave[0].freq = WaveFreq;
    wave[0].amp = WaveAmp;
    wave[1].freq = WaveFreq*2.0;
    wave[1].amp = WaveAmp*0.5;
    float4 Po = float4(Position.xyz,1.0);
    // sum waves	
    Po.y = 0.0;
    float ddx = 0.0, ddy = 0.0;
    for(int i=0; i<NWAVES; i++) {
	Po.y += evaluateWave(wave[i], Po.xz, Timer);
	float deriv = evaluateWaveDeriv(wave[i], Po.xz, Timer);
	ddx += deriv * wave[i].dir.x;
	ddy += deriv * wave[i].dir.y;
    }
    // compute tangent basis
    float3 B = float3(1, ddx, 0);
    float3 T = float3(0, ddy, 1);
    float3 N = float3(-ddx, 1, -ddy);
    HPosition = mul(WvpXf,Po);
    // pass texture coordinates for fetching the normal map
    float2 TextureScale = float2(TexReptX,TexReptY);
    float2 BumpSpeed = float2(BumpSpeedX,BumpSpeedY);
    UV = UVIN.xy*TextureScale;
    float cycle = fmod(Timer, 100.0);
    bumpUV0.xy = UVIN.xy*TextureScale + cycle*BumpSpeed;
    bumpUV1.xy = UVIN.xy*TextureScale*2.0 + cycle*BumpSpeed*4.0;
    bumpUV2.xy = UVIN.xy*TextureScale*4.0 + cycle*BumpSpeed*8.0;

    // compute the 3x3 tranform from tangent space to object space
    float3x3 objToTangentSpace;
    // first rows are the tangent and binormal scaled by the bump scale
    objToTangentSpace[0] = BumpScale * normalize(T);
    objToTangentSpace[1] = BumpScale * normalize(B);
    objToTangentSpace[2] = normalize(N);

    T2WXf1.xyz = mul(WorldXf[0].xyz,objToTangentSpace);
    T2WXf2.xyz = mul(WorldXf[1].xyz,objToTangentSpace);
    T2WXf3.xyz = mul(WorldXf[2].xyz,objToTangentSpace);

    // compute the eye vector (going from shaded point to eye) in cube space
    float3 Pw = mul(WorldXf,Po).xyz;
    WorldView = float3(ViewIXf[0].w,ViewIXf[1].w,ViewIXf[2].w) - Pw; // view inv. transpose contains eye position in world space in last row
}

