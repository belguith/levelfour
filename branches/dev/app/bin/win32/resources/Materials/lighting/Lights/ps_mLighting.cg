
    #include "lUtils.cg"

    void ambient_ps
    (
       float2 iUV      : TEXCOORD0,
       float3 iAmbient   : TEXCOORD1,
       float iFog      : TEXCOORD2,

       uniform sampler2D dMap   : TEXUNIT0,
       uniform float3 iFogColour,
       uniform float2 iScale,
       uniform float2 iScroll,

       out float4 oColour   : COLOR
    )
    {
       iUV.x = (iUV.x + iScroll.x)*iScale.x;
       iUV.y = (iUV.y + iScroll.y)*iScale.y;

       float3 diffuse = tex2D(dMap, iUV).rgb;
       oColour = float4(iFog * iAmbient * diffuse + iFogColour*(1-iFog),1);
    }

    void diffuse_ps
    (
       float2 iUV      : TEXCOORD0,
       float4 iWorldPos   : TEXCOORD1,
       float3 iNormal   : TEXCOORD2,
       float iFog      : TEXCOORD7,

       uniform float2 iScale,
       uniform float2 iScroll,
       uniform float3 iLightDif,
       uniform float4 iLightPos,
       uniform sampler2D dMap   : TEXUNIT0,

    #ifdef _SPOTLIGHT
       float3 iSpotDir      : TEXCOORD3,
       uniform float4 iSpotParams,
    #endif

    #if !_DIRECTIONAL
       uniform float4 iLightAtt,
       #ifdef _SHADOWS
          uniform float4 iDepthRange,
       #endif
    #endif

    #ifdef _SPECULAR
       uniform float4 iLightSpec,
       uniform float3 iEyePos,
       uniform float iShininess,
       uniform sampler2D spMap   : TEXUNIT1,
    #endif

    #ifdef _NORMAL
       uniform sampler2D nMap   : TEXUNIT2,
       float3 iTangent              : TEXCOORD4,
       float3 iBinormal                   : TEXCOORD5,
    #endif

    #ifdef _SHADOWS
       uniform float4 iInvShMapSize,
       uniform sampler2D shMap : TEXUNIT3,
       float4 iShadowUV   : TEXCOORD6,
    #endif

    #ifdef _CELSHADING
       #if !_SPECULAR
          uniform float3 iEyePos,
       #endif
       uniform sampler1D dCelMap   : TEXUNIT4,
       uniform sampler1D sCelMap   : TEXUNIT5,
       uniform sampler1D eCelMap   : TEXUNIT6,
    #endif

       out float4 oColour   : COLOR
    )
    {
       if(iFog == 0)
          discard;

       float3 lightDir = iLightPos.xyz - (iLightPos.w * iWorldPos.xyz);
       float distanceLight = length(lightDir);
       lightDir = normalize(lightDir);

       iUV.x = (iUV.x + iScroll.x)*iScale.x;
       iUV.y = (iUV.y + iScroll.y)*iScale.y;

    #ifdef _NORMAL
       float3 normalTex = (tex2D(nMap,iUV).rgb - 0.5)*2;
       iNormal = normalize(normalTex.x * iTangent - normalTex.y * iBinormal + normalTex.z * iNormal);
    #endif

       float nDotL = max(dot(lightDir,iNormal),0);
       float4 difTex = tex2D(dMap,iUV);
       if(difTex.a<0.5f)
          discard;

    #ifdef _CELSHADING
       // Step functions from textures
       float edge = max(dot(iNormal,normalize(iEyePos - iWorldPos.xyz)),0);
       nDotL = tex1D(dCelMap, nDotL).x;
       edge = tex1D(eCelMap, edge).x;

       #ifdef _SPECULAR
          float4 specTex = tex2D(spMap,iUV);
          float specular = getSpecularContribution(iLightSpec.w,iEyePos,iWorldPos,lightDir,iNormal,nDotL,iShininess);
          specular = tex1D(sCelMap, specular).x;
          float3 light = edge*(difTex.xyz * (iLightDif * nDotL) + (specular * specTex.xyz * iLightSpec.xyz));
       #else
          float3 light = edge*(difTex.xyz * (iLightDif * nDotL));
       #endif
    #else
       float3 light = iLightDif * nDotL * difTex.xyz;

       #ifdef _SPECULAR
          float4 specTex = tex2D(spMap,iUV);
          light += getSpecularContribution(iLightSpec.w,iEyePos,iWorldPos,lightDir,iNormal,nDotL,iShininess) * specTex.xyz * iLightSpec.xyz;
       #endif
    #endif

    #if !_DIRECTIONAL
       half lightAtt = getLightAttenuation(distanceLight,iLightAtt);
       light *= lightAtt;
    #endif

    #ifdef _SPOTLIGHT
       float spot = getSpotlightEffect(lightDir,iSpotDir,iSpotParams);
       light *= spot;
    #endif

    #ifdef _SHADOWS
       #ifdef !_DIRECTIONAL
              float lD = (distanceLight - iDepthRange.x) * iDepthRange.w;
          float2 moments = btex2D_rg(shMap,iShadowUV.xy,iInvShMapSize).rg;
       #else
          float lD = iShadowUV.z;
          float2 moments = btex2D_rg(shMap,iShadowUV.xy,iInvShMapSize).ba;
       #endif
          
       float p = lD<=moments.x?1:0;   
       float variance = moments.y - (moments.x*moments.x);
          variance = max(variance, 0.001);
       float d = lD - moments.x;
       float p_max = variance / (variance + d*d);
       p_max = max(p,p_max);
       light *= clamp((p_max - 0.6) / (1 - 0.6), 0, 1);
    #endif

       light *= iFog;
       oColour = float4(light, 1);
    }
