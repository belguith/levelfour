/*
-----------------------------------------------------------------------------
This source file is part of the “aQtree” cooperation project between the Institute of Animation, Brainpets GbR and University of Konstanz.
Copyright (c) 2008-2009 Filmakademie Baden-Wuerttemberg, Institute of Animation & University of Konstanz and brainpets GbR

www.aQtree.de

aQtree nodes function in FRAPPER, the framework application developed at the Institute of Animation.
FRAPPER
research.animationsinstitut.de
sourceforge.net/projects/frapper
Copyright (c) 2008-2009 Filmakademie Baden-Wuerttemberg, Institute of Animation

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free Software
Foundation; version 2.1 of the License.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA, or go to
http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
-----------------------------------------------------------------------------
*/

fragment_program Watercolor/WatercolorFragmentProgram glsl
{
	source watercolor.frag
	
	default_params
	{
		param_named inputMap int 0
		param_named granulationMap int 1
		param_named noiseMap int 2
		param_named paperMap int 3		
		param_named pixelSize float4 1.0 1.0 0.0 0.0
		param_named noiseScale float1 3.5
		param_named noiseIntensity float1 30.0
		param_named paperScale float1 3.5
		param_named paperIntensity float1 0.3
		param_named granulationScale float1 3.5
		param_named granulationIntensity float1 0.5
		param_named edgeDarkening float1 0.3
		param_named opacity float1 0.6
	}
}


vertex_program Watercolor/QuadVertexProgram glsl
{
	source quad.vert
}




material Watercolor/WatercolorMaterial
{
	technique
	{
		pass
		{
			depth_check off

			fragment_program_ref Watercolor/WatercolorFragmentProgram
			{
			}
			
			vertex_program_ref Watercolor/QuadVertexProgram
			{
			}
	
			
			//define texture unit 0 (inputMap)
			texture_unit
			{
				texture inputMap 2d
                tex_coord_set 0
				tex_address_mode clamp
				filtering linear linear linear
			}
			
			//define texture unit 1 (granulationMap)
			texture_unit
			{
				texture pigment_granulation.png 2d
                tex_coord_set 0
				tex_address_mode wrap
				//filtering linear linear linear
			}
			
			//define texture unit 2 (noiseMap)
			texture_unit
			{
				texture noise2.png 2d
                tex_coord_set 0
				tex_address_mode wrap
				filtering linear linear linear
			}
			
			//define texture unit 3 (paperMap)
			texture_unit
			{
				texture AlbrechtDuerer210.png 2d
                tex_coord_set 0
				tex_address_mode wrap
				filtering linear linear linear
			}
		}
	}
}
