/**************************************************************************************
**                                                                                   **
**                                    sb_Quad_vs                                   **
**                                                                                   **
***************************************************************************************/

void nf_quad_vs( in  float4 iPosition : POSITION,
				   //in  float2 iTexCoord : TEXCOORD0,
                   out float4 oPosition : POSITION,
				   out float2 oTexCoord : TEXCOORD0,
			       uniform float4x4 worldViewProj)
{
    // Use standardise transform, so work accord with render system specific (RS depth, requires texture flipping, etc)
    oPosition = mul(worldViewProj, iPosition);

    // The input positions adjusted by texel offsets, so clean up inaccuracies
    iPosition.xy = sign(iPosition.xy);
	
    // Convert to image-space
    oTexCoord = (float2(iPosition.x, -iPosition.y) + 1.0f) * 0.5f; //iTexCoord; <- is also possible
}


/**************************************************************************************
**                                                                                   **
**                                      TEX2DLOD                                     **
**             For ps_3_0, we want to use tex2Dlod because it's faster               **
***************************************************************************************/

ps_3_0 float4 TEX2DLOD(sampler2D map, float2 uv)
{
    return tex2Dlod(map, float4(uv.xy, 0, 0));
}

float4 TEX2DLOD(sampler2D map, float2 uv)
{
    return tex2D(map, uv);
}


/**************************************************************************************
**                                                                                   **
**                                       nf_ps                                      **
**                                                                                   **
***************************************************************************************/

void nf_ps( in  float2 texCoord : TEXCOORD0,
			  out float4 color    : COLOR,
			  uniform float flatteningFactor,
			  uniform sampler2D inputMap0 : TEXUNIT0)
{
		
	float3 normal = TEX2DLOD(inputMap0,float2(texCoord.x,texCoord.y)).xyz;
    color.rgb = normalize(float3(normal.x,normal.y,normal.z*flatteningFactor));
	color.a = 1.0;
	
}