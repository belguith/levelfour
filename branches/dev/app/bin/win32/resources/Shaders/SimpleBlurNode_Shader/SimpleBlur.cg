/**************************************************************************************
**                                                                                   **
**                                    sb_Quad_vs                                   **
**                                                                                   **
***************************************************************************************/

void sb_quad_vs( in  float4 iPosition : POSITION,
				   //in  float2 iTexCoord : TEXCOORD0,
                   out float4 oPosition : POSITION,
				   out float2 oTexCoord : TEXCOORD0,
			       uniform float4x4 worldViewProj)
{
    // Use standardise transform, so work accord with render system specific (RS depth, requires texture flipping, etc)
    oPosition = mul(worldViewProj, iPosition);

    // The input positions adjusted by texel offsets, so clean up inaccuracies
    iPosition.xy = sign(iPosition.xy);
	
    // Convert to image-space
    oTexCoord = (float2(iPosition.x, -iPosition.y) + 1.0f) * 0.5f; //iTexCoord; <- is also possible
}


/**************************************************************************************
**                                                                                   **
**                                      TEX2DLOD                                     **
**             For ps_3_0, we want to use tex2Dlod because it's faster               **
***************************************************************************************/

ps_3_0 float4 TEX2DLOD(sampler2D map, float2 uv)
{
    return tex2Dlod(map, float4(uv.xy, 0, 0));
}

float4 TEX2DLOD(sampler2D map, float2 uv)
{
    return tex2D(map, uv);
}


/**************************************************************************************
**                                                                                   **
**                                    ssaoBlurX_ps                                   **
**                                                                                   **
***************************************************************************************/

#define NUM_BLUR_SAMPLES 8

float4 ssaoBlurX_ps(float2 uv : TEXCOORD0,
					uniform float4 invTexSize,
					uniform sampler2D map : TEXUNIT0,
					uniform sampler2D geomMap : TEXUNIT1): COLOR0
{

    float2 o = float2(invTexSize.x, 0);
	float denom = NUM_BLUR_SAMPLES + 1;
    float4 sum =  TEX2DLOD(map, uv) * (denom);
    float4 geom = TEX2DLOD(geomMap, uv);
	
    for (int i = 1; i <= NUM_BLUR_SAMPLES; ++i)
    {
        float2 nuv = uv + o * i;
        float4 nGeom = TEX2DLOD(geomMap, nuv);
        float coef = (NUM_BLUR_SAMPLES + 1 - i) * (dot(geom.yzw, nGeom.yzw) > 0.9);
        sum += TEX2DLOD(map, nuv) * coef;
        denom += coef;
    }
	
    for (int i = 1; i <= 4; ++i)
    {
        float2 nuv = uv + o * -i;
        float4 nGeom = TEX2DLOD(geomMap, nuv);
        float coef = (NUM_BLUR_SAMPLES + 1 - i) * (dot(geom.yzw, nGeom.yzw) > 0.9);
        sum += TEX2DLOD(map, nuv) * coef;
        denom += coef;
    }
    return sum / denom;
}



float4 ssaoBlurY_ps(float2 uv : TEXCOORD0,
    uniform float4 invTexSize,
    uniform sampler2D map : TEXUNIT0, uniform sampler2D geomMap : TEXUNIT1): COLOR0
{
//    return TEX2DLOD(map, uv);
    float2 o = float2(0, invTexSize.y);
    float4 sum = TEX2DLOD(map, uv) * (NUM_BLUR_SAMPLES + 1);
    float denom = NUM_BLUR_SAMPLES + 1;
    float4 geom = TEX2DLOD(geomMap, uv);
    for (int i = 1; i <= NUM_BLUR_SAMPLES; ++i)
    {
        float2 nuv = uv + o * i;
        float4 nGeom = TEX2DLOD(geomMap, nuv);
        float coef = (NUM_BLUR_SAMPLES + 1 - i) * (dot(geom.yzw, nGeom.yzw) > 0.9);
        sum += TEX2DLOD(map, nuv) * coef;
        denom += coef;
    }
    for (int i = 1; i <= 4; ++i)
    {
        float2 nuv = uv + o * -i;
        float4 nGeom = TEX2DLOD(geomMap, nuv);
        float coef = (NUM_BLUR_SAMPLES + 1 - i) * (dot(geom.yzw, nGeom.yzw) > 0.9);
        sum += TEX2DLOD(map, nuv) * coef;
        denom += coef;
    }
    return sum / denom;
}

/**************************************************************************************
**                                                                                   **
**                                       sb_ps                                      **
**                                                                                   **
***************************************************************************************/

void sb_ps( in  float2 texCoord : TEXCOORD0,
			out float4 color    : COLOR,
			uniform float4 invTexSize,
			uniform float blurringFactor,
			uniform sampler2D inputMap0 : TEXUNIT0)
{
		
	float3 input = TEX2DLOD(inputMap0,float2(texCoord.x,texCoord.y)).xyz;
	color.rgb = input;
	color.a = 1.0;
	
}