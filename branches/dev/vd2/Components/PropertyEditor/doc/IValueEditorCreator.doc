/**
\ingroup propertyeditorcomp
\interface IValueEditorCreator IValueEditorCreator
\brief Interface to a value editor creator

Implementations of this interface are registered with the value editor factory 
(\ref IValueEditorFactory) to deal with 
\li Creation of editors based on data types
\li Convertion of data values to and from a string
\li Painting of data values using a QPainter

The property editor component provides default implementations of this interface 
for the following data types
\htmlonly
<table>
<tr><td><b>Type</b></td><td><b>Type</b></td></tr>
<tr><td><b>int</b></td><td><b>QLineEdit</b></td></tr>
<tr><td><b>long</b></td><td><b>QLineEdit</b></td></tr>
<tr><td><b>double</b></td><td><b>QLineEdit</b></td></tr>
<tr><td><b>QString</b></td><td><b>QLineEdit</b></td></tr>
<tr><td><b>QColor</b></td><td><b>CColorPickerWidget</b></td></tr>
<tr><td><b>QList of int,long and double</b></td><td><b>QLineEdit</b></td></tr>
</table>
\endhtmlonly

If any of your object's property types are not found in the above table; then
you will have to create an object that implements IValueEditorCreator interface
and register it with the IValueEditorFactory returned by IPropertyEditor::editorFactory().
*/

/**
\fn virtual const char* IValueEditorCreator::typeName() = 0
*/

/**
\fn virtual QWidget* IValueEditorCreator::createEditor(QWidget* parent) = 0
*/

/**
\fn virtual void IValueEditorCreator::connectEditor(QWidget* editor, QObject* receiver, const char* slot) = 0
*/

/**
\fn virtual bool IValueEditorCreator::setEditorValue(QWidget* editor, QVariant value) = 0
*/

/**
\fn virtual QVariant IValueEditorCreator::editorValue(QWidget* editor) = 0
*/

/**
\fn virtual void IValueEditorCreator::closeEditor(QWidget* editor) = 0
*/

/**
\fn virtual QString IValueEditorCreator::toString(QVariant value) = 0
*/

/**
\fn virtual QVariant IValueEditorCreator::fromString(QString value) = 0
*/

/**
\fn virtual bool IValueEditorCreator::paintValue(QPainter* paint, QRect rect, QVariant value) = 0
*/

